"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[5864],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2409:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={id:"explore-pallet-template",title:"Exploring the pallet template",sidebar_label:"Exploring the pallet template",description:"Explore the pallet template, and get a sneak peek into what is to come next!"},l=void 0,o={unversionedId:"Substrate/section3/explore-pallet-template",id:"Substrate/section3/explore-pallet-template",title:"Exploring the pallet template",description:"Explore the pallet template, and get a sneak peek into what is to come next!",source:"@site/docs/Substrate/section3/explore-pallet-template.md",sourceDirName:"Substrate/section3",slug:"/Substrate/section3/explore-pallet-template",permalink:"/docs/Substrate/section3/explore-pallet-template",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Substrate/section3/explore-pallet-template.md",tags:[],version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1693238811,formattedLastUpdatedAt:"Aug 28, 2023",frontMatter:{id:"explore-pallet-template",title:"Exploring the pallet template",sidebar_label:"Exploring the pallet template",description:"Explore the pallet template, and get a sneak peek into what is to come next!"},sidebar:"substrate",previous:{title:"Node Template Tour & Overview",permalink:"/docs/Substrate/section3/node-template-tour"},next:{title:"Custom FRAME Pallet",permalink:"/docs/Substrate/section4/"}},s={},p=[{value:"lib.rs",id:"librs",level:2},{value:"mock.rs and tests.rs",id:"mockrs-and-testsrs",level:2},{value:"benchmarking.rs and weights.rs",id:"benchmarkingrs-and-weightsrs",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"We will spend most of our time in the ",(0,a.kt)("inlineCode",{parentName:"p"},"pallets/connect")," folder in the next modules. Upon opening it,\nthere are a few items of interest, mostly with testing, as well as the actual source code of the\npallet. Again, as mentioned in the last section of this module, this is just a Rust crate that uses\nFRAME to generate and implement certain traits and structures to be compatible with the runtime."),(0,a.kt)("p",null,"Our pallet, called ",(0,a.kt)("inlineCode",{parentName:"p"},"pallet-connect"),", defines our custom logic that is then enabled by our runtime\nwithin the node template."),(0,a.kt)("h2",{id:"librs"},"lib.rs"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"lib.rs")," defines the entry point for the pallet. It contains all the core logic - extrinsics,\nevents, and errors, are all defined by a single struct:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[pallet::pallet]\npub struct Pallet<T>(_);\n")),(0,a.kt)("p",null,"We will go into more detail on the structure of ",(0,a.kt)("inlineCode",{parentName:"p"},"lib.rs")," later but know for now that this makes a\nFRAME pallet at the most basic level. Pallets, just like this one, are later imported as a crate to\nthe runtime, where the aforementioned ",(0,a.kt)("inlineCode",{parentName:"p"},"construct_runtime!")," macro is responsible for defining and\nconstructing a runtime based on the collection of pallets and their respective configurations."),(0,a.kt)("h2",{id:"mockrs-and-testsrs"},"mock.rs and tests.rs"),(0,a.kt)("p",null,"In most pallets, including our template, you will also see the following files: ",(0,a.kt)("inlineCode",{parentName:"p"},"mock.rs")," and\n",(0,a.kt)("inlineCode",{parentName:"p"},"tests.rs"),". As one may assume, they are used for two purposes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"mock.rs")," is used for configuring a test environment, i.e., a test runtime configured for unit\ntesting."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"tests.rs")," is where unit tests reside and act on the values and configuration defined within\n",(0,a.kt)("inlineCode",{parentName:"li"},"mock.rs"))),(0,a.kt)("h2",{id:"benchmarkingrs-and-weightsrs"},"benchmarking.rs and weights.rs"),(0,a.kt)("p",null,"Benchmarking and weights measure an extrinsic's performance, or ",(0,a.kt)("strong",{parentName:"p"},"weight"),". Substrate is built\naround the concept of ",(0,a.kt)("strong",{parentName:"p"},"weight"),", which measures how much computation is required to execute it\non-chain. Using benchmarking, weight can be assigned to each extrinsic, and the ",(0,a.kt)("inlineCode",{parentName:"p"},"weights.rs")," file is\ngenerated. Often, this weight corresponds to how much a user will pay to execute that state change.\nWeights also ensure that the transactions within a block can be executed successfully within the\nblock production time window."),(0,a.kt)("p",null,"Although these two won't be covered in this course in-depth at a technical level, they are both\ncrucial concepts to learn if one wishes to create a production-grade pallet."))}d.isMDXComponent=!0}}]);