"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[6835],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,f=u["".concat(l,".").concat(m)]||u[m]||c[m]||o;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},198:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={id:"events-errors",title:"Events & Errors",sidebar_label:"Events & Errors",description:"Define the necessary events and errors needed for our pallet"},i=void 0,s={unversionedId:"Substrate/section4/events-errors",id:"Substrate/section4/events-errors",title:"Events & Errors",description:"Define the necessary events and errors needed for our pallet",source:"@site/docs/Substrate/section4/events-errors.md",sourceDirName:"Substrate/section4",slug:"/Substrate/section4/events-errors",permalink:"/docs/Substrate/section4/events-errors",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Substrate/section4/events-errors.md",tags:[],version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1693238811,formattedLastUpdatedAt:"Aug 28, 2023",frontMatter:{id:"events-errors",title:"Events & Errors",sidebar_label:"Events & Errors",description:"Define the necessary events and errors needed for our pallet"},sidebar:"substrate",previous:{title:"Creating storage maps",permalink:"/docs/Substrate/section4/create-storage-map"},next:{title:"Building a FRAME Pallet",permalink:"/docs/Substrate/section5/"}},l={},p=[{value:"Defining Events - Adding a New Event",id:"defining-events---adding-a-new-event",level:2},{value:"Defining Errors - Adding a New Error",id:"defining-errors---adding-a-new-error",level:2}],d={toc:p},u="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"For this section, you should be in: ",(0,a.kt)("inlineCode",{parentName:"p"},"pallets/connect/lib.rs")," to follow along.")),(0,a.kt)("p",null,"Although our node and pallet compile, it does not contain all the functionality we need to fulfill\nthe project's requirements."),(0,a.kt)("p",null,"We have three overarching components we need to take care of to fulfill our functionality:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("strong",{parentName:"li"},"Implement events and errors")),(0,a.kt)("li",{parentName:"ol"},"Implement storage items"),(0,a.kt)("li",{parentName:"ol"},"Implement dispatchable functions (extrinsics)")),(0,a.kt)("p",null,"This section will focus on adding new events and errors to ",(0,a.kt)("inlineCode",{parentName:"p"},"pallet_connect")," to prepare for creating\nstate changes."),(0,a.kt)("h2",{id:"defining-events---adding-a-new-event"},"Defining Events - Adding a New Event"),(0,a.kt)("p",null,"By now, your working directory should be ",(0,a.kt)("inlineCode",{parentName:"p"},"pallets/connect/lib.rs"),". Navigate to ",(0,a.kt)("inlineCode",{parentName:"p"},"enum Event<T>"),"\ninside of ",(0,a.kt)("inlineCode",{parentName:"p"},"lib.rs"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[pallet::event]\n#[pallet::generate_deposit(pub(super) fn deposit_event)]\npub enum Event<T: Config> {}\n")),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("inlineCode",{parentName:"p"},"#[pallet::generate_deposit(pub(super) fn deposit_event)]")," is a macro that we haven't covered yet.\nIt simply defines a helper method to deposit or emit an event.")),(0,a.kt)("p",null,"Considering the project's requirements, we would like to emit an event whenever a user registers. We\ncan add ",(0,a.kt)("inlineCode",{parentName:"p"},"Registered")," to define a new event as a variant of our ",(0,a.kt)("inlineCode",{parentName:"p"},"Event")," enum. As part of this event,\nwe also would like to show the AccountId, or address, of the registered user. The implementation is\nas follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"#[pallet::event]\n#[pallet::generate_deposit(pub(super) fn deposit_event)]\npub enum Event<T: Config> {\n    /// A new user has registered via our pallet.\n    Registered { id: T::AccountId },\n}\n")),(0,a.kt)("p",null,"Later, we can emit this event to the network once a user registers."),(0,a.kt)("h2",{id:"defining-errors---adding-a-new-error"},"Defining Errors - Adding a New Error"),(0,a.kt)("p",null,"As a part of our pallet's anti-sybil requirements, we also want to ",(0,a.kt)("strong",{parentName:"p"},"only")," register a user if they\nhave enough balance to place a lock on. However, if they don't have enough balance, we do not want\nthe extrinsic to commit to a state change."),(0,a.kt)("p",null,"We shouldn't panic within our pallet, meaning we must define an error to signify when someone has a\nlow balance."),(0,a.kt)("p",null,"Navigate to ",(0,a.kt)("inlineCode",{parentName:"p"},"enum Error"),", and an error variant called ",(0,a.kt)("inlineCode",{parentName:"p"},"LowBalance"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"    // Errors inform users that something went wrong.\n    #[pallet::error]\n    pub enum Error<T> {\n        /// Balance does not meet the minimum required amount\n        LowBalance,\n    }\n")),(0,a.kt)("p",null,"Because we also have other requirements, be sure to also add these errors:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"    // Errors inform users that something went wrong.\n    #[pallet::error]\n    pub enum Error<T> {\n        /// Balance does not meet the minimum required amount\n        LowBalance,\n        /// Name exceeds MaxNameLength\n        NameTooLong,\n        /// Bio exceeds MaxBioLength\n        BioTooLong,\n        /// Name already registered\n        NameInUse,\n        /// Account ID is already registered\n        AccountIdAlreadyRegistered,\n        /// Integer overflow\n        IntegerOverflow,\n    }\n")),(0,a.kt)("p",null,"Now we have a set amount of errors that cover any cases where our extrinsic may fail."),(0,a.kt)("admonition",{title:"How many events should I emit? How many errors should I define?",type:"note"},(0,a.kt)("p",{parentName:"admonition"},"In pallet development, it's ",(0,a.kt)("strong",{parentName:"p"},"highly recommended")," to define errors for every edge case where a\nstate change may fail. The runtime should not panic, ",(0,a.kt)("strong",{parentName:"p"},"ever"),". It is prudent to define and handle\nappropriate errors within your pallet."),(0,a.kt)("p",{parentName:"admonition"},"Events do not need to be as often, but only as it is useful. Generally, an event can be emitted\nwhenever an extrinsic is successfully executed.")))}c.isMDXComponent=!0}}]);