"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[4072],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var o=a.createContext({}),m=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(o.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=m(t),d=i,h=u["".concat(o,".").concat(d)]||u[d]||c[d]||r;return t?a.createElement(h,s(s({ref:n},p),{},{components:t})):a.createElement(h,s({ref:n},p))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=d;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[u]="string"==typeof e?e:i,s[1]=l;for(var m=2;m<r;m++)s[m]=t[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5705:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>m});var a=t(7462),i=(t(7294),t(3905));const r={id:"enums",title:"Enums in Rust",sidebar_label:"Enums",description:"Learn what enums are and how to use them in Rust."},s=void 0,l={unversionedId:"Rust/section4/enums",id:"Rust/section4/enums",title:"Enums in Rust",description:"Learn what enums are and how to use them in Rust.",source:"@site/docs/Rust/section4/enums.md",sourceDirName:"Rust/section4",slug:"/Rust/section4/enums",permalink:"/docs/Rust/section4/enums",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Rust/section4/enums.md",tags:[],version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1693238811,formattedLastUpdatedAt:"Aug 28, 2023",frontMatter:{id:"enums",title:"Enums in Rust",sidebar_label:"Enums",description:"Learn what enums are and how to use them in Rust."},sidebar:"rust",previous:{title:"Intro to Intermediate Rust - Enums & Matching Patterns",permalink:"/docs/Rust/section4/"},next:{title:"Panic! in Rust",permalink:"/docs/Rust/section4/panic"}},o={},m=[{value:"Basic Pattern Matching with Enums",id:"basic-pattern-matching-with-enums",level:2},{value:"Try it yourself!",id:"try-it-yourself",level:2},{value:"What&#39;s happening here?",id:"whats-happening-here",level:2}],p={toc:m},u="wrapper";function c(e){let{components:n,...t}=e;return(0,i.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Enumerations, or ",(0,i.kt)("strong",{parentName:"p"},"enums")," are data structures that allow for a list of pre-defined options in Rust.\nThey are useful for pattern matching, defining expected conditions, errors, and more."),(0,i.kt)("p",null,"An example of enums in use would be defining different types of animal classes. An enum's values are\ncalled ",(0,i.kt)("em",{parentName:"p"},"variants"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"// Use the `enum` keyword to define an enum\n// This derive statement is a macro that ensures we can use the `==` to compare enum values\n// Here, we can see there are four variants that belong inside of the `AnimalType` enum.\n#[derive(PartialEq)]\nenum AnimalType {\n    Mammal,\n    Reptile,\n    Birds,\n    Fish\n}\n\n")),(0,i.kt)("p",null,"In a function, we can, for example, take any type that is ",(0,i.kt)("inlineCode",{parentName:"p"},"AnimalType"),", which in turn means there\nare four possible values as to what it can be. The program can choose to implement different\nbehavior based on the value of the enum:"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"This is where a match statement from the previous module would be ideal to use, as it will allow us\nto specify a case for each possible value in the ",(0,i.kt)("inlineCode",{parentName:"p"},"AnimalType")," enum.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'\nfn take_animal(name: &str, animal_type: AnimalType) {\n    if animal_type == AnimalType::Mammal {\n        println!("{name} is a mammal!");\n    }\n}\n\n')),(0,i.kt)("p",null,"This function takes a string literal as a name, ",(0,i.kt)("inlineCode",{parentName:"p"},"&str"),", and specifically looks for whether the\npassed in ",(0,i.kt)("inlineCode",{parentName:"p"},"AnimalType")," is a mammal or not. Enum values are accessed using a double colon, ",(0,i.kt)("inlineCode",{parentName:"p"},"::"),", and\ncan be checked as a conditional statement if needed."),(0,i.kt)("p",null,"However, this function is rather bland and doesn't account for the other possibilities of\n",(0,i.kt)("inlineCode",{parentName:"p"},"AnimalType"),"."),(0,i.kt)("h2",{id:"basic-pattern-matching-with-enums"},"Basic Pattern Matching with Enums"),(0,i.kt)("p",null,"If you recall, we used a ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," statement in the last module to cover a case where a variable could\neither be ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),". Applying this same concept with enums, we can ensure that all possible\ncases are covered."),(0,i.kt)("p",null,"This concept of matching a case to an outcome is called ",(0,i.kt)("strong",{parentName:"p"},"pattern matching"),", and is a very common\ndesign pattern in Rust."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// Same function, but expanded to cover all cases with `match`\nfn take_animal(name: &str, animal_type: AnimalType) {\n    // The match state\n    match animal_type {\n        // The animal is a mammal!\n        AnimalType::Mammal => println!("{name} is a mammal!"),\n        // The animal is a reptile!\n        AnimalType::Reptile => println!("{name} is a reptile!"),\n        // The animal is a bird!\n        AnimalType::Birds => println!("{name} is a bird!"),\n        // The animal is a fish!\n        AnimalType::Fish => println!("{name} is a fish!"),\n    };\n}\n\n')),(0,i.kt)("p",null,"While this is entirely possible with a series of ",(0,i.kt)("inlineCode",{parentName:"p"},"if")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"else if")," statements, using ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," is a\nmore concise and powerful way to pair a specific input to a particular output. The value of\n",(0,i.kt)("inlineCode",{parentName:"p"},"animal_type"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," statement will print a line appropriate to that specific input."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"Anything that is 'conditional', i.e., true or false, can be pattern matched. In future modules, you\nwill see more examples of advanced pattern matching that take advantage of this powerful feature.")),(0,i.kt)("p",null,"The syntax for specifying a ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," pattern starts with the keyword ",(0,i.kt)("inlineCode",{parentName:"p"},"match"),", followed by the name of\nthe value you wish to pattern match. Each possibility is then paired with a specific output using an\narrow (",(0,i.kt)("inlineCode",{parentName:"p"},"=>"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// The possibility => output\n AnimalType::Mammal => println!("{name} is a mammal!"),\n')),(0,i.kt)("h2",{id:"try-it-yourself"},"Try it yourself!"),(0,i.kt)("iframe",{width:"100%",height:"580",src:"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=%2F%2F+Use+the+%60enum%60+keyword+to+define+an+enum%0A%2F%2F+This+derive+statement+is+a+macro+that+ensures+we+can+use+the+%60%3D%3D%60+to+compare+enum+values%0A%2F%2F+Here%2C+we+can+see+there+are+four+variants+that+belong+inside+of+the+%60AnimalType%60+enum.%0A%23%5Bderive%28PartialEq%29%5D%0Aenum+AnimalType+%7B%0A++++Mammal%2C%0A++++Reptile%2C%0A++++Birds%2C%0A++++Fish%0A%7D%0A%0Afn+main%28%29+%7B%0A++++%2F%2F+Each+variant+of+%60AnimalType%60+can+now+be+properly%0A++++%2F%2F+matched+and+handled.%0A++++take_animal%28%22Cat%22%2C+AnimalType%3A%3AMammal%29%3B%0A++++take_animal%28%22Komodo+Dragon%22%2C+AnimalType%3A%3AReptile%29%3B%0A++++take_animal%28%22Chicken%22%2C+AnimalType%3A%3ABirds%29%3B%0A++++take_animal%28%22Swordfish%22%2C+AnimalType%3A%3AFish%29%3B%0A%0A%7D%0A%0A%2F%2F+Same+function%2C+but+expanded+to+cover+all+cases+with+%60match%60%0Afn+take_animal%28name%3A+%26str%2C+animal_type%3A+AnimalType%29+%7B%0A++++%2F%2F+The+match+state%0A++++match+animal_type+%7B%0A++++++++%2F%2F+The+animal+is+a+mammal%21%0A++++++++AnimalType%3A%3AMammal+%3D%3E+println%21%28%22%7Bname%7D+is+a+mammal%21%22%29%2C%0A++++++++%2F%2F+The+animal+is+a+reptile%21%0A++++++++AnimalType%3A%3AReptile+%3D%3E+println%21%28%22%7Bname%7D+is+a+reptile%21%22%29%2C%0A++++++++%2F%2F+The+animal+is+a+bird%21%0A++++++++AnimalType%3A%3ABirds+%3D%3E+println%21%28%22%7Bname%7D+is+a+bird%21%22%29%2C%0A++++++++%2F%2F+The+animal+is+a+fish%21%0A++++++++AnimalType%3A%3AFish+%3D%3E+println%21%28%22%7Bname%7D+is+a+fish%21%22%29%2C%0A++++%7D%3B%0A%7D"}),(0,i.kt)("h2",{id:"whats-happening-here"},"What's happening here?"),(0,i.kt)("p",null,"This code defines an enum, ",(0,i.kt)("inlineCode",{parentName:"p"},"AnimalType"),", with ",(0,i.kt)("strong",{parentName:"p"},"four")," variants. A function is defined,\n",(0,i.kt)("inlineCode",{parentName:"p"},"take_animal"),", that calls for a string literal and ",(0,i.kt)("inlineCode",{parentName:"p"},"AnimalType")," as parameters. A ",(0,i.kt)("inlineCode",{parentName:"p"},"match")," statement\nthen matches the input of ",(0,i.kt)("inlineCode",{parentName:"p"},"AnimalType")," to the desired outcome."))}c.isMDXComponent=!0}}]);