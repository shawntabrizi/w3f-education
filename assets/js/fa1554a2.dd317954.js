"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[6346],{3905:(t,e,n)=>{n.d(e,{Zo:()=>l,kt:()=>f});var a=n(67294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,i=function(t,e){if(null==t)return{};var n,a,i={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var h=a.createContext({}),p=function(t){var e=a.useContext(h),n=e;return t&&(n="function"==typeof t?t(e):r(r({},e),t)),n},l=function(t){var e=p(t.components);return a.createElement(h.Provider,{value:e},t.children)},c="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,i=t.mdxType,o=t.originalType,h=t.parentName,l=s(t,["components","mdxType","originalType","parentName"]),c=p(n),d=i,f=c["".concat(h,".").concat(d)]||c[d]||u[d]||o;return n?a.createElement(f,r(r({ref:e},l),{},{components:n})):a.createElement(f,r({ref:e},l))}));function f(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var o=n.length,r=new Array(o);r[0]=d;var s={};for(var h in e)hasOwnProperty.call(e,h)&&(s[h]=e[h]);s.originalType=t,s[c]="string"==typeof t?t:i,r[1]=s;for(var p=2;p<o;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},19419:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>h,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const o={id:"hash",title:"H for Hash",sidebar_position:8},r=void 0,s={unversionedId:"AtoZ/hash",id:"AtoZ/hash",title:"H for Hash",description:"H for Hash",source:"@site/docs/AtoZ/hash.md",sourceDirName:"AtoZ",slug:"/AtoZ/hash",permalink:"/docs/AtoZ/hash",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/AtoZ/hash.md",tags:[],version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1693238811,formattedLastUpdatedAt:"Aug 28, 2023",sidebarPosition:8,frontMatter:{id:"hash",title:"H for Hash",sidebar_position:8},sidebar:"atoz",previous:{title:"G for GRANDPA",permalink:"/docs/AtoZ/grandpa"},next:{title:"I for Interoperability",permalink:"/docs/AtoZ/interoperability"}},h={},p=[{value:"Properties of a Cryptographic Hash Function",id:"properties-of-a-cryptographic-hash-function",level:3},{value:"Hashing vs. Encryption",id:"hashing-vs-encryption",level:3},{value:"Hashing on Polkadot",id:"hashing-on-polkadot",level:3}],l={toc:p},c="wrapper";function u(t){let{components:e,...o}=t;return(0,i.kt)(c,(0,a.Z)({},l,o,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"H for Hash",src:n(47494).Z,width:"800",height:"420"})),(0,i.kt)("p",null,"Hashing, in its simplest explanation, is a way to transform data. Depending on the underlying\nhashing algorithm, the transformation of that data happens differently. For example, Bitcoin uses\nthe SHA-256 hashing algorithm (Simple Hashing Algorithm 2, 256bits), which returns a 256-bit output,\nusually represented as an alphanumeric string. Even the slightest change in the input will\nsignificantly modify the hashing algorithm\u2019s output. In cryptography, this is known as\n",(0,i.kt)("strong",{parentName:"p"},"diffusion"),". For example, here, we will add whitespace to the end of the input."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u201cWow, such hash\u201d = 9DD40341177F8ADD02DA4DE95A572D8BCBF8E07D51726FB51162442B13BB53D6\n\n\u201cWow, such hash \u201d = 8973F8EEA2536243DE4E67AEE2181E3D4C6470B1BA64E0C632E5C91EEDC47108\n")),(0,i.kt)("p",null,"No matter the length of the input data, the hashing function will always return the same sized\noutput. It is a deterministic function, so it always produces the same output for the same input.\nThis output is helpful in many ways, such as quickly verifying and validating data sets of any size."),(0,i.kt)("p",null,"Hashes are a fundamental component of blockchain technology, and we use them in many parts. For\nexample, we can hash transactions and then query them by their hash. We can hash a collection of\ntransactions and create a transaction root hash; we can hash block data which include transactions\nand metadata about the transactions, then use that output hash as the block's unique ID. In newer\ngenerations of blockchains, we hash function calls and their outputs; we even hash new runtime\nupdates."),(0,i.kt)("p",null,"To understand blockchain, it is important to understand cryptographic hash functions. Well-designed\ncryptographic hash functions will have the following properties:"),(0,i.kt)("h3",{id:"properties-of-a-cryptographic-hash-function"},"Properties of a Cryptographic Hash Function"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Deterministic"),": The same input should always have the same output."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Quick computation"),": We need to ensure that the calculation of the function is fast."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Preimage resistance(confusion)"),": We need to be sure that the hashing output cannot be\nreverse-engineered to find out what the original input was."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"A slight change in the input changes the output(diffusion)"),": Even the slightest change in the\ninput should alter the output significantly."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Collision-resistant"),": We need to be sure that each unique input maps to an individual output."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Second preimage resistance"),": Given a hash function and its output, we should not be able to\ngenerate an input (or inputs) that, when hashed, produce the same result."),(0,i.kt)("h3",{id:"hashing-vs-encryption"},"Hashing vs. Encryption"),(0,i.kt)("p",null,"Hashing and encryption are related but different. ",(0,i.kt)("strong",{parentName:"p"},"Hashing")," is a one-way function, meaning that we\nshould not be able to reverse engineer the original input from just the output. ",(0,i.kt)("strong",{parentName:"p"},"Encryption"),", on\nthe other hand, is a two-way function. Data(plaintext) can be hidden(encrypted) by transforming it\nto ciphertext with the encryption key. The ciphertext can then be transformed into the original\nplaintext by decrypting the ciphertext with the decryption key. The encryption and decryption key\nmay be the same value or different, depending on the type of cryptosystem used."),(0,i.kt)("h3",{id:"hashing-on-polkadot"},"Hashing on Polkadot"),(0,i.kt)("p",null,"Polkadot and Kusama use an implementation called ",(0,i.kt)("strong",{parentName:"p"},"BLAKE2b"),", based on the BLAKE2 cryptographic\nhashing algorithm. BLAKE2 is also faster than SHA-2 and SHA-3, with similar or better security than\nSHA-3. We chose BLAKE2 for its security, speed, and simplicity of implementation. The BLAKE2b\nimplementation is optimized for 64-bit platforms and can be twice as performant compared to running\nthe SHA-256 algorithm on a similar machine. Due to these advantages, the project ZCash transitioned\nto using BLAKE2 hashing from SHA-256, projecting that BLAKE2 is improving over time while SHA-256 is\ngetting worse."),(0,i.kt)("p",null,"Blake2b hashing would look like the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"\u201cWow, such hash\u201d =\ne530f3d3ddfc24213167e7c601733a1b688e6cf362277b46f1135e348aa63477\n\n\u201cWow, such hash \u201d =\nf299f5ee1731f755d0f58bdc54ef3b0cadb94f7f959c3b18627e12138ed5c70e\n")))}u.isMDXComponent=!0},47494:(t,e,n)=>{n.d(e,{Z:()=>a});const a=n.p+"assets/images/H-d860facb2e9977525ece3211f5a4343b.png"}}]);