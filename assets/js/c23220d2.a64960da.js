"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[724],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,s=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=l(n),m=i,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||s;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=n.length,a=new Array(s);a[0]=p;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},577:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return p}});var r=n(7462),i=n(3366),s=(n(7294),n(3905)),a=["components"],o={id:"vectors-vs-strings",title:"Vectors, Strings, and &str Slices",sidebar_label:"Vectors, Strings, and &str Slices",description:"Learn the difference between vectors and strings in Rust."},c=void 0,l={unversionedId:"Rust/section5/vectors-vs-strings",id:"Rust/section5/vectors-vs-strings",isDocsHomePage:!1,title:"Vectors, Strings, and &str Slices",description:"Learn the difference between vectors and strings in Rust.",source:"@site/docs/Rust/section5/vectors-vs-strings.md",sourceDirName:"Rust/section5",slug:"/Rust/section5/vectors-vs-strings",permalink:"/docs/Rust/section5/vectors-vs-strings",editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Rust/section5/vectors-vs-strings.md",version:"current",lastUpdatedBy:"NaughtyRider",lastUpdatedAt:1683377274,formattedLastUpdatedAt:"5/6/2023",frontMatter:{id:"vectors-vs-strings",title:"Vectors, Strings, and &str Slices",sidebar_label:"Vectors, Strings, and &str Slices",description:"Learn the difference between vectors and strings in Rust."},sidebar:"rust",previous:{title:"Defining Methods for Structs",permalink:"/docs/Rust/section5/struct-methods"},next:{title:"Intro to Advanced Rust - Traits, Generics, & Lifetimes",permalink:"/docs/Rust/section6/section-6-intro"}},u=[{value:"When to use a string slice versus a String?",id:"when-to-use-a-string-slice-versus-a-string",children:[]}],d={toc:u};function p(e){var t=e.components,n=(0,i.Z)(e,a);return(0,s.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"It can be rather confusing for a beginner to wrap their head around how these various types relate and how they work together."),(0,s.kt)("p",null,"To summarize:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A ",(0,s.kt)("inlineCode",{parentName:"li"},"String")," is a data structure that is essentially a wrapped, ",(0,s.kt)("em",{parentName:"li"},"managed")," ",(0,s.kt)("inlineCode",{parentName:"li"},"Vec<T>"),".  It represents a list of UTF-8 bytes that are stored on the heap.  It is useful for defining typical words and sentences in a mutable fashion and can be modified during the runtime.  Recall a ",(0,s.kt)("inlineCode",{parentName:"li"},"String")," is just a struct, meaning it owns the fields within.  In this case, it owns the bytes that you write to it."),(0,s.kt)("li",{parentName:"ul"},"String literals/slices, or ",(0,s.kt)("inlineCode",{parentName:"li"},"&str"),", are immutable, predefined slices of UTF-8 bytes that are defined at ",(0,s.kt)("strong",{parentName:"li"},"compile-time"),", not runtime. They are either stored as ",(0,s.kt)("inlineCode",{parentName:"li"},"'static"),", aka part of the executable in static storage, or on the stack.  It is also fixed-length.  "),(0,s.kt)("li",{parentName:"ul"},"A ",(0,s.kt)("inlineCode",{parentName:"li"},"Vec<T>")," is a data structure that is more generic in nature, as it allows for ",(0,s.kt)("em",{parentName:"li"},"any")," data type to be passed in to form a managed list.")),(0,s.kt)("h2",{id:"when-to-use-a-string-slice-versus-a-string"},"When to use a string slice versus a String?"),(0,s.kt)("p",null,"Remember, slices are ",(0,s.kt)("strong",{parentName:"p"},'"view-only", immutable references'),".  ",(0,s.kt)("inlineCode",{parentName:"p"},"String")," should be used when you require a growable, ownable collection of bytes.  ",(0,s.kt)("inlineCode",{parentName:"p"},"String")," is more costly - within most programs, it is not an issue, but in some environments, it may be better to utilize string slices whenever possible."),(0,s.kt)("p",null,"String slices can also be converted to a ",(0,s.kt)("inlineCode",{parentName:"p"},"String")," rather easily:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'\nlet literal_to_string: String = "Hello".to_string();\n\n')))}p.isMDXComponent=!0}}]);