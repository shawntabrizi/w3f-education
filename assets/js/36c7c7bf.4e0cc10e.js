"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[5221],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>g});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=a.createContext({}),u=function(e){var t=a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=u(r),m=n,g=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return r?a.createElement(g,i(i({ref:t},c),{},{components:r})):a.createElement(g,i({ref:t},c))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:n,i[1]=s;for(var u=2;u<o;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},3258:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var a=r(7462),n=(r(7294),r(3905));const o={id:"substrate-storage",title:"Storage",sidebar_label:"Storage",description:"Learn how storage works in Substrate, and how it is crucial for managing state."},i=void 0,s={unversionedId:"Substrate/section2/substrate-storage",id:"Substrate/section2/substrate-storage",title:"Storage",description:"Learn how storage works in Substrate, and how it is crucial for managing state.",source:"@site/docs/Substrate/section2/substrate-storage.md",sourceDirName:"Substrate/section2",slug:"/Substrate/section2/substrate-storage",permalink:"/docs/Substrate/section2/substrate-storage",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Substrate/section2/substrate-storage.md",tags:[],version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1693238811,formattedLastUpdatedAt:"Aug 28, 2023",frontMatter:{id:"substrate-storage",title:"Storage",sidebar_label:"Storage",description:"Learn how storage works in Substrate, and how it is crucial for managing state."},sidebar:"substrate",previous:{title:"Runtime & Outer Node",permalink:"/docs/Substrate/section2/substrate-runtime"},next:{title:"Pallets",permalink:"/docs/Substrate/section2/substrate-pallets"}},l={},u=[{value:"Substrate Storage Overview",id:"substrate-storage-overview",level:2},{value:"FRAME Storage Abstraction",id:"frame-storage-abstraction",level:3}],c={toc:u},p="wrapper";function d(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"When building a custom pallet, ",(0,n.kt)("strong",{parentName:"p"},"storage")," of some kind will be needed. As with any other\napplication, we need a place to store information after submitting state changes to the network.\nWhether we\u2019re looking to store a simple value or complex data structures with mappings, a set of\nAPIs are provided to implement it accordingly. Because the state is stored within this storage and\nreplicated across the network, it is essential to realize that storage via blockchain is considered\ncostly and should be used wisely by any pallet in the runtime."),(0,n.kt)("admonition",{title:"Fun Fact: Polkadot and Kusama's Runtime is 1.5 MB",type:"info"},(0,n.kt)("p",{parentName:"admonition"},"The runtime itself is stored using this storage instance of the Substrate node under a unique key\nwithin the underlying key-value database. The entirety of the runtime's Wasm code can be accessed\non-chain.")),(0,n.kt)("p",null,"FRAME storage items allow a developer to define and store new items in our blockchain\u2019s state.\nSubstrate's underlying ",(0,n.kt)("inlineCode",{parentName:"p"},"sp_io")," is responsible, where they make calls accordingly to the storage\nlayer of Substrate."),(0,n.kt)("h2",{id:"substrate-storage-overview"},"Substrate Storage Overview"),(0,n.kt)("p",null,"Although FRAME makes declaring and using different storage primitives trivial, it's important to\nunderstand some context for what is occurring at a slightly lower level."),(0,n.kt)("p",null,"If you recall, the ",(0,n.kt)("inlineCode",{parentName:"p"},"sp_io")," crate handles any needed I/O operations for the runtime. In a theoretical\nscenario (such as FRAME not being used or available), ",(0,n.kt)("inlineCode",{parentName:"p"},"sp_io"),"'s underlying APIs could be called\ndirectly. This crate is not just simply logging to some arbitrary database - there are several\nlayers to the storage of a Substrate node. This is out of the scope of this course, but it is\nprudent to know just how abstract some of the mechanisms in Substrate are."),(0,n.kt)("h3",{id:"frame-storage-abstraction"},"FRAME Storage Abstraction"),(0,n.kt)("p",null,"There are several ways to declare storage using FRAME. These are done by using several storage\nitems, which are summarized below:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"StorageMap")," - A type that stores value for a given key. Allowing to insert/remove/iterate on\nvalues."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"StorageValue")," - A type that allows storing a single value."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"StorageDoubleMap")," - A type that allows storing values for (key1, key2) couple. Similar to\n",(0,n.kt)("inlineCode",{parentName:"li"},"StorageMap"),", but allow to iterate and remove value associated with the first key."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"StorageNMap")," - A type that allows to store values for an arbitrary number of keys in the form of\n",(0,n.kt)("inlineCode",{parentName:"li"},"(Key<Hasher1, key1>, Key<Hasher2, key2>, ..., Key<HasherN, keyN>)."))),(0,n.kt)("p",null,"For more information on their usage and APIs, look at the\n",(0,n.kt)("a",{parentName:"p",href:"https://paritytech.github.io/substrate/master/frame_support"},"Substrate Rust documentation")," for\nfurther info."),(0,n.kt)("p",null,"Further in the course, you will see ",(0,n.kt)("inlineCode",{parentName:"p"},"StorageMap")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"StorageValue")," being utilized."))}d.isMDXComponent=!0}}]);