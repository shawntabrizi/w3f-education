"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[4993],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=p(n),f=s,y=d["".concat(c,".").concat(f)]||d[f]||l[f]||a;return n?r.createElement(y,i(i({ref:t},u),{},{components:n})):r.createElement(y,i({ref:t},u))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,i=new Array(a);i[0]=d;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o.mdxType="string"==typeof e?e:s,i[1]=o;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7573:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var r=n(7462),s=n(3366),a=(n(7294),n(3905)),i=["components"],o={id:"associated-generics",title:"Associated Types vs Generic Types",sidebar_label:"Associated Types vs Generic Types",description:"Learn the difference between associated types vs generic types."},c=void 0,p={unversionedId:"Rust/section6/associated-generics",id:"Rust/section6/associated-generics",isDocsHomePage:!1,title:"Associated Types vs Generic Types",description:"Learn the difference between associated types vs generic types.",source:"@site/docs/Rust/section6/associated-generics.md",sourceDirName:"Rust/section6",slug:"/Rust/section6/associated-generics",permalink:"/docs/Rust/section6/associated-generics",editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Rust/section6/associated-generics.md",version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1680536374,formattedLastUpdatedAt:"4/3/2023",frontMatter:{id:"associated-generics",title:"Associated Types vs Generic Types",sidebar_label:"Associated Types vs Generic Types",description:"Learn the difference between associated types vs generic types."},sidebar:"rust",previous:{title:"Generic Types",permalink:"/docs/Rust/section6/generics"},next:{title:"Lifetimes",permalink:"/docs/Rust/section6/lifetimes"}},u=[{value:"Associated Types in Use",id:"associated-types-in-use",children:[]},{value:"Associated Types vs Generics",id:"associated-types-vs-generics",children:[]}],l={toc:u};function d(e){var t=e.components,n=(0,s.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Associated types are an abstract way to define a name for what a type should be."),(0,a.kt)("p",null,"In the ",(0,a.kt)("a",{parentName:"p",href:"/docs/Rust/section6/generics"},"Generics")," section, we encountered an associated type when we defined the ",(0,a.kt)("inlineCode",{parentName:"p"},"Mul")," trait as a bound:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn square<T: Mul<Output = T> + Copy>(x: T)...\n")),(0,a.kt)("p",null,"A closer look reveals an additional parameter in our trait bound declaration - ",(0,a.kt)("inlineCode",{parentName:"p"},"Output"),".  ",(0,a.kt)("inlineCode",{parentName:"p"},"Output")," is an ",(0,a.kt)("strong",{parentName:"p"},"associated type"),", sometimes called an ",(0,a.kt)("strong",{parentName:"p"},"associated item"),", and is another feature of Rust."),(0,a.kt)("h2",{id:"associated-types-in-use"},"Associated Types in Use"),(0,a.kt)("p",null,"Associated types are specified as part of a trait.  They are defined by moving ",(0,a.kt)("inlineCode",{parentName:"p"},"type")," declarations within the trait as an Output type."),(0,a.kt)("p",null,"A prime example is ",(0,a.kt)("inlineCode",{parentName:"p"},"Mul")," specifying any Output.  Contrary to generics, this is not required to be enforced to a specific type by the compiler."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"pub trait Mul<RHS = Self> {\n    type Output;\n    fn mul(self, rhs: RHS) -> Self::Output;\n}\n")),(0,a.kt)("h2",{id:"associated-types-vs-generics"},"Associated Types vs Generics"),(0,a.kt)("p",null,"While associated types and generics are used similarly and generate scalable code, there are some key differences between the two:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Associated types generally provide more flexibility than generics, but only within their specific trait's scope.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Associated types specify a trait's expected ",(0,a.kt)("em",{parentName:"p"},"output"),"'s type, whereas generics are more the ",(0,a.kt)("em",{parentName:"p"},"input")," types for a trait.  Associated types represent the result of the trait's behavior on a given type."))))}d.isMDXComponent=!0}}]);