"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[2594],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},p),{},{components:n})):a.createElement(h,i({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7808:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={id:"how-to-test-frame",title:"How to approach testing in FRAME",sidebar_label:"How to approach testing in FRAME",description:"How to correctly approach testing in FRAME and a deeper look at how to mock types properly."},i=void 0,s={unversionedId:"Substrate/section7/how-to-test-frame",id:"Substrate/section7/how-to-test-frame",title:"How to approach testing in FRAME",description:"How to correctly approach testing in FRAME and a deeper look at how to mock types properly.",source:"@site/docs/Substrate/section7/how-to-test-frame.md",sourceDirName:"Substrate/section7",slug:"/Substrate/section7/how-to-test-frame",permalink:"/docs/Substrate/section7/how-to-test-frame",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Substrate/section7/how-to-test-frame.md",tags:[],version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1693238811,formattedLastUpdatedAt:"Aug 28, 2023",frontMatter:{id:"how-to-test-frame",title:"How to approach testing in FRAME",sidebar_label:"How to approach testing in FRAME",description:"How to correctly approach testing in FRAME and a deeper look at how to mock types properly."},sidebar:"substrate",previous:{title:"Runtime Panics & FRAME Best Practices",permalink:"/docs/Substrate/section7/runtime-panics"},next:{title:"FRAME Deepdive",permalink:"/docs/Substrate/section8/"}},l={},c=[{value:"Good Practices - Test Everything",id:"good-practices---test-everything",level:2},{value:"Mocking Types and Pallets",id:"mocking-types-and-pallets",level:2},{value:"Mocked Pallets",id:"mocked-pallets",level:3},{value:"Case Study: Randomness",id:"case-study-randomness",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"In ",(0,r.kt)("a",{parentName:"p",href:"/docs/Substrate/section5/unit-tests"},"Module 5"),", we briefly reviewed a basic unit test implementation for\nour pallet. This section will provide more depth to testing a pallet in Substrate and how to\napproach it in general."),(0,r.kt)("h2",{id:"good-practices---test-everything"},"Good Practices - Test Everything"),(0,r.kt)("p",null,"As discussed in ",(0,r.kt)("a",{parentName:"p",href:"/docs/Substrate/section7/runtime-panics"},"Runtime Panics & FRAME Best Practices"),", your pallet should\nnever explicitly panic due to something like ",(0,r.kt)("inlineCode",{parentName:"p"},"unwrap()"),"-ing an invalid value or even accounting for\nedge cases like integer overflows by using\n",(0,r.kt)("a",{parentName:"p",href:"/docs/Substrate/section7/runtime-panics#using-safe-arithmetic"},"safe arithmetic"),"."),(0,r.kt)("p",null,"The same approach of ensuring ",(0,r.kt)("strong",{parentName:"p"},"any")," edge case is covered in the runtime can be reinforced in unit\ntests. Ideally, every error should have an accompanying (or inclusive) unit test to ensure the error\nis correctly handled."),(0,r.kt)("h2",{id:"mocking-types-and-pallets"},"Mocking Types and Pallets"),(0,r.kt)("p",null,"Unit tests require a mock runtime environment to be defined. Because using actual primitives could\nbe prohibitive in testing, types are mostly mocked."),(0,r.kt)("p",null,"If you go back to the ",(0,r.kt)("inlineCode",{parentName:"p"},"substrate-mooc-node/pallets/connect/src/mock.rs")," and observe the mock runtime\ncalled ",(0,r.kt)("inlineCode",{parentName:"p"},"Test"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"AccountId")," is a prime example of a simple, mock primitive as ",(0,r.kt)("inlineCode",{parentName:"p"},"u64"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"impl frame_system::Config for Test {\n    ...\n    type AccountId = u64;\n    ...\n}\n")),(0,r.kt)("p",null,"An account id is simply a number versus a more complex type in testing. You may also notice many\ntypes in this configuration are merely just the Rust unit type, as they aren't relevant in the\ncontext of this mock environment (at least for our specific pallet) as denoted by\n",(0,r.kt)("inlineCode",{parentName:"p"},"SomeConfigParam = ()"),"."),(0,r.kt)("p",null,"Other types, such as a ",(0,r.kt)("inlineCode",{parentName:"p"},"Block")," within the runtime, are helpfully defined via\n",(0,r.kt)("inlineCode",{parentName:"p"},"frame_system::mocking::MockBlock<Test>"),"."),(0,r.kt)("h3",{id:"mocked-pallets"},"Mocked Pallets"),(0,r.kt)("p",null,"Because pallets are external modules that expose several traits and their respective ",(0,r.kt)("inlineCode",{parentName:"p"},"struct"),", they\ncan also be configured via these mock types. Take a look at ",(0,r.kt)("inlineCode",{parentName:"p"},"pallet_balance"),", which is defined\nwithin ",(0,r.kt)("inlineCode",{parentName:"p"},"mock.rs"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"impl pallet_balances::Config for Test {\n    type Balance = u128;\n    type RuntimeEvent = RuntimeEvent;\n    type ExistentialDeposit = ExistentialDeposit;\n    type AccountStore = System;\n    type ReserveIdentifier = [u8; 8];\n}\n")),(0,r.kt)("p",null,"Again, notice how ",(0,r.kt)("inlineCode",{parentName:"p"},"Balance")," is defined as a primitive Rust ",(0,r.kt)("inlineCode",{parentName:"p"},"u128")," type."),(0,r.kt)("h3",{id:"case-study-randomness"},"Case Study: Randomness"),(0,r.kt)("p",null,"For some other traits/pallets, it's possible that ",(0,r.kt)("inlineCode",{parentName:"p"},"frame_support_test")," can provide extra mock and\ntesting-related crates. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"TestRandomness<T>")," is a mock type for randomness since we\ndon't have a running chain to generate the traditional entropy. For this reason, it also makes our\ntests much more predictable (because it's a predictable source of randomness for testing), which is\nideal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'/// These values will always be the same\n#[test]\nfn generate_gradient_with_correct_length() {\n    let hex = Connect::generate_hex_values(H256([0; 32]));\n    println!("{:?}", hex);\n    assert_eq!(hex.0, [8, 48, 48]);\n    assert_eq!(hex.1, [8, 48, 48]);\n}\n')),(0,r.kt)("p",null,"It's also possible to define your types for this substitution."))}d.isMDXComponent=!0}}]);