"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[2156],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(n),h=o,m=d["".concat(s,".").concat(h)]||d[h]||p[h]||r;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3697:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>l});var a=n(7462),o=(n(7294),n(3905));const r={id:"account",title:"A for Account",sidebar_position:1},i=void 0,c={unversionedId:"AtoZ/account",id:"AtoZ/account",title:"A for Account",description:"A for Account",source:"@site/docs/AtoZ/account.md",sourceDirName:"AtoZ",slug:"/AtoZ/account",permalink:"/docs/AtoZ/account",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/AtoZ/account.md",tags:[],version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1693238811,formattedLastUpdatedAt:"Aug 28, 2023",sidebarPosition:1,frontMatter:{id:"account",title:"A for Account",sidebar_position:1},sidebar:"atoz",previous:{title:"W3F A - Z ELI5 series",permalink:"/docs/introatoz"},next:{title:"B for Bridge",permalink:"/docs/AtoZ/bridge"}},s={},l=[{value:"What is an account?",id:"what-is-an-account",level:2},{value:"What a Polkadot account public key looks like",id:"what-a-polkadot-account-public-key-looks-like",level:2},{value:"Creating an account",id:"creating-an-account",level:2},{value:"What a mnemonic phrase looks like",id:"what-a-mnemonic-phrase-looks-like",level:2},{value:"Portability",id:"portability",level:2}],u={toc:l},d="wrapper";function p(e){let{components:t,...r}=e;return(0,o.kt)(d,(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"A for Account",src:n(4842).Z,width:"800",height:"420"})),(0,o.kt)("h2",{id:"what-is-an-account"},"What is an account?"),(0,o.kt)("p",null,"Accounts are also sometimes referred to as wallets or addresses. On blockchains, we need a place to\nhold our assets, and this is what accounts are used for. A user can have many accounts. On Polkadot\nand Kusama, unlike most other public blockchains, we can even give accounts on-chain, authenticated,\nand human-readable identities if we would like to."),(0,o.kt)("h2",{id:"what-a-polkadot-account-public-key-looks-like"},"What a Polkadot account public key looks like"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"14dQ7nC8YabzseZ5iqvG4EQnrkTCsUCwMbCP6nQWeKgjF6Ye\n")),(0,o.kt)("p",null,"Accounts on Polkadot and Kusama are SS58-encoded key-network pairs. By representing an address as a\ncombination of keys and network IDs, it makes sending assets to an address that is unusable much\nless likely (Ethereum only uses keys; imagine sending ETH from Ethereum mainnet to an account that\nonly exists on Binance Smart Chain, which is another EVM-based chain and being confused as to why\nyou can\u2019t see the ETH on Binance Smart Chain). SS58 is a slight modification of the Bitcoin\nBase-58-Check encoding. By using different address prefixes, we can easily tell if an account is on\nthe same chain as another. For example, Polkadot addresses start with a 1, Kusama is always with a\ncapital letter, generic substrate addresses will start with a 5."),(0,o.kt)("h2",{id:"creating-an-account"},"Creating an account"),(0,o.kt)("p",null,"Like any blockchain address, Polkadot and Kusama accounts are controlled with public-private key\npairs. This is a cryptographic way of creating a public-facing id that is intrinsically linked to a\nprivate id, which should be kept secret. The address generation starts with a mnemonic phrase which\nis then converted into a public-private key pair. Because different wallets use different ways to\nderive the public and private keys from the mnemonic phrase, there can be issues with deriving the\nsame public and private key pairs from the same mnemonic on different wallets."),(0,o.kt)("h2",{id:"what-a-mnemonic-phrase-looks-like"},"What a mnemonic phrase looks like"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"way pumpkin card castle crystal domain mystery chalk dog twin chronic image\n")),(0,o.kt)("h2",{id:"portability"},"Portability"),(0,o.kt)("p",null,"Accounts can also be utilized across Substrate chains. Since addresses are the result of encoding a\npublic key and a network ID, we can create an address for another chain by decoding the address,\nchanging the network ID, and encoding the key with the new network ID, resulting in a new address\nthat is controlled by the same underlying key. This allows you to use one mnemonic phrase across\nmultiple Substrate chains."))}p.isMDXComponent=!0},4842:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/A-a014f6c3611f8cf182b05bc800de2feb.png"}}]);