"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[79],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=a,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:a,i[1]=o;for(var u=2;u<s;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5083:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>u});var r=n(7462),a=(n(7294),n(3905));const s={id:"closures",title:"Closure Functions in Rust",sidebar_label:"Closures",description:"Learn how to use function closures."},i=void 0,o={unversionedId:"Rust/section7/closures",id:"Rust/section7/closures",title:"Closure Functions in Rust",description:"Learn how to use function closures.",source:"@site/docs/Rust/section7/closures.md",sourceDirName:"Rust/section7",slug:"/Rust/section7/closures",permalink:"/docs/Rust/section7/closures",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Rust/section7/closures.md",tags:[],version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1680626061,formattedLastUpdatedAt:"Apr 4, 2023",frontMatter:{id:"closures",title:"Closure Functions in Rust",sidebar_label:"Closures",description:"Learn how to use function closures."},sidebar:"rust",previous:{title:"Iterators",permalink:"/docs/Rust/section7/iterators"},next:{title:"Macros in Rust",permalink:"/docs/Rust/section7/macros"}},l={},u=[{value:"Defining &amp; Using Closures",id:"defining--using-closures",level:2},{value:"Type Inference",id:"type-inference",level:3},{value:"Capturing Environments",id:"capturing-environments",level:3},{value:"Try it yourself!",id:"try-it-yourself",level:2},{value:"What&#39;s going on here?",id:"whats-going-on-here",level:2}],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Closures are one of Rust's functional programming-esque features that can create ",(0,a.kt)("strong",{parentName:"p"},"anonymous functions"),".  Closures, like functions, execute blocks of logic within.  They are fundamentally different in how they operate and handle ownership."),(0,a.kt)("p",null,"They may even be used as a return type, as shown in examples such as ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrap_or_else()"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"let some_result: i32 = dangerous_value().unwrap_or_else(|| 42);\n")),(0,a.kt)("p",null,"The two vertical pipes within ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrap_or_else")," signify that it is a closure, and 42 is the returned value.  Closures can be used in generics using the ",(0,a.kt)("inlineCode",{parentName:"p"},"Fn")," trait or even as a parameter for an actual function."),(0,a.kt)("h2",{id:"defining--using-closures"},"Defining & Using Closures"),(0,a.kt)("p",null,"Defining closures is similar to defining a variable.  It utilizes two vertical pipes to signify any parameters.  A return type can also be specified as part of the closure.  Closures are called the same way a function is called:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let name = "Bob";\n    // Closure that captures `name` and returns a new string with "Hello, " prepended\n    let greet_closure = |name: &str| -> String {\n        format!("Hello, {}!", name)\n    };\n    // It is called the same way a function is\n    let greeting = greet_closure(name);\n    println!("{}", greeting); // Prints "Hello, Bob!"\n}\n')),(0,a.kt)("h3",{id:"type-inference"},"Type Inference"),(0,a.kt)("p",null,"Where functions require explicit type declarations for their parameter and return types, closures don't have this requirement.  They are able to infer both types, depending on how one uses it:"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"This also can shorten the closure into one line, as the curly brackets are omitted, and the return type is directly specified.  If this was a multi-line closure, then curly brackets would be required.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'let name = "Bob";\nlet greet_closure = |name| format!("Hello, {}!", name);\n// It is called the same way a function is.  The types are inferred here!\n// `name` is of type &str, meaning it now expects it from thereon.\nlet greeting = greet_closure(name);\nprintln!("{}", greeting); // Prints "Hello, Bob!"\n// This will fail!\nlet greeting_two = greet_closure(123);\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"18 | let greeting = greet_closure(123);\n   |                ------------- ^^^ expected `&str`, found integer\n   |                |\n   |                arguments to this function are incorrect\n")),(0,a.kt)("h3",{id:"capturing-environments"},"Capturing Environments"),(0,a.kt)("p",null,"Unlike functions, closures can capture their environment.  A closure can utilize local variables within a scope that the closure is defined:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    let name = "Bob";\n    // This closure has no arguments now but can use the `name`\n    // variable defined in the main scope.\n    let greet_closure_that_captures = || format!("Hello Captured, {}!", name);\n    // It is called the same way a function is\n    let greeting_two = greet_closure_that_captures();\n    println!("{}", greeting); /\n}\n')),(0,a.kt)("h2",{id:"try-it-yourself"},"Try it yourself!"),(0,a.kt)("iframe",{width:"100%",height:"580",src:"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=fn+main%28%29+%7B%0A++++let+name+%3D+%22Bob%22%3B%0A++++let+greet_closure+%3D+%7Cname%7C+format%21%28%22Hello%2C+%7B%7D%21%22%2C+name%29%3B%0A++++%2F%2F+It+is+called+the+same+way+a+function+is.+The+types+are+inferred+here%21%0A++++%2F%2F+%60name%60+is+of+type+%26str%2C+meaning+it+now+expects+it+from+thereon.%0A++++let+greeting+%3D+greet_closure%28name%29%3B%0A++++println%21%28%22%7B%7D%22%2C+greeting%29%3B+%2F%2F+Prints+%22Hello%2C+Bob%21%22%0A%0A++++%2F%2F+This+will+fail%21%0A++++%2F%2F+let+greeting+%3D+greet_closure%28123%29%3B%0A++++%0A++++%2F%2F+Closure+that+captures+%60name%60+and+returns+a+new+string+with+%22Hello%2C+%22+prepended%0A++++let+greet_closure_that_captures+%3D+%7C%7C+format%21%28%22Hello+Captured%2C+%7B%7D%21%22%2C+name%29%3B%0A++++%2F%2F+It+is+called+the+same+way+a+function+is%0A++++let+greeting_two+%3D+greet_closure_that_captures%28%29%3B%0A++++println%21%28%22%7B%7D%22%2C+greeting_two%29%3B+%2F%2F+Prints+%22Hello%2C+Bob%21%22%0A%7D%0A"}),(0,a.kt)("h2",{id:"whats-going-on-here"},"What's going on here?"),(0,a.kt)("p",null,"The code above showcases two examples of closures in use.  The first example accepts a parameter, of which its type is inferred.  The second example removes the parameter and instead captures a variable outside of the closure but within the same scope."))}d.isMDXComponent=!0}}]);