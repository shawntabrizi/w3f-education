"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[724],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(r),m=i,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return r?n.createElement(f,a(a({ref:t},u),{},{components:r})):n.createElement(f,a({ref:t},u))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var s=r.length,a=new Array(s);a[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:i,a[1]=o;for(var c=2;c<s;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9264:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const s={id:"vectors-vs-strings",title:"Vectors, Strings, and &str Slices",sidebar_label:"Vectors, Strings, and &str Slices",description:"Learn the difference between vectors and strings in Rust."},a=void 0,o={unversionedId:"Rust/section5/vectors-vs-strings",id:"Rust/section5/vectors-vs-strings",title:"Vectors, Strings, and &str Slices",description:"Learn the difference between vectors and strings in Rust.",source:"@site/docs/Rust/section5/vectors-vs-strings.md",sourceDirName:"Rust/section5",slug:"/Rust/section5/vectors-vs-strings",permalink:"/docs/Rust/section5/vectors-vs-strings",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Rust/section5/vectors-vs-strings.md",tags:[],version:"current",lastUpdatedBy:"Radha",lastUpdatedAt:1694689980,formattedLastUpdatedAt:"Sep 14, 2023",frontMatter:{id:"vectors-vs-strings",title:"Vectors, Strings, and &str Slices",sidebar_label:"Vectors, Strings, and &str Slices",description:"Learn the difference between vectors and strings in Rust."},sidebar:"rust",previous:{title:"Defining Methods for Structs",permalink:"/docs/Rust/section5/struct-methods"},next:{title:"Intro to Advanced Rust - Traits, Generics, & Lifetimes",permalink:"/docs/Rust/section6/"}},l={},c=[{value:"When to use a string slice versus a String?",id:"when-to-use-a-string-slice-versus-a-string",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"It can be rather confusing for a beginner to wrap their head around how these various types relate\nand how they work together."),(0,i.kt)("p",null,"To summarize:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"String")," is a data structure that is essentially a wrapped, ",(0,i.kt)("em",{parentName:"li"},"managed")," ",(0,i.kt)("inlineCode",{parentName:"li"},"Vec<T>"),". It represents a\nlist of UTF-8 bytes that are stored on the heap. It is useful for defining typical words and\nsentences in a mutable fashion and can be modified during the runtime. Recall a ",(0,i.kt)("inlineCode",{parentName:"li"},"String")," is just a\nstruct, meaning it owns the fields within. In this case, it owns the bytes that you write to it."),(0,i.kt)("li",{parentName:"ul"},"String literals/slices, or ",(0,i.kt)("inlineCode",{parentName:"li"},"&str"),", are immutable, predefined slices of UTF-8 bytes that are\ndefined at ",(0,i.kt)("strong",{parentName:"li"},"compile-time"),", not runtime. They are either stored as ",(0,i.kt)("inlineCode",{parentName:"li"},"'static"),", aka part of the\nexecutable in static storage, or on the stack. It is also fixed-length."),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("inlineCode",{parentName:"li"},"Vec<T>")," is a data structure that is more generic in nature, as it allows for ",(0,i.kt)("em",{parentName:"li"},"any")," data type to\nbe passed in to form a managed list.")),(0,i.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/I5QupMyJ64Q?si=N4n4swVWtoL9RrQH",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),(0,i.kt)("h2",{id:"when-to-use-a-string-slice-versus-a-string"},"When to use a string slice versus a String?"),(0,i.kt)("p",null,"Remember, slices are ",(0,i.kt)("strong",{parentName:"p"},'"view-only", immutable references'),". ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," should be used when you require\na growable, ownable collection of bytes. ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," is more costly - within most programs, it is not\nan issue, but in some environments, it may be better to utilize string slices whenever possible."),(0,i.kt)("p",null,"String slices can also be converted to a ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," rather easily:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'\nlet literal_to_string: String = "Hello".to_string();\n\n')))}d.isMDXComponent=!0}}]);