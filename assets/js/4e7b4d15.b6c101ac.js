"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[8843],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var i=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=i.createContext({}),l=function(e){var n=i.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=l(e.components);return i.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(t),h=a,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||o;return t?i.createElement(m,r(r({ref:n},p),{},{components:t})):i.createElement(m,r({ref:n},p))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=h;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:a,r[1]=s;for(var l=2;l<o;l++)r[l]=t[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},8719:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=t(7462),a=(t(7294),t(3905));const o={id:"chain-genesis-spec",title:"Chain Specification",sidebar_label:"Chain Specification",description:"Learn how basis chain and genesis configurations work in FRAME"},r=void 0,s={unversionedId:"Substrate/section8/chain-genesis-spec",id:"Substrate/section8/chain-genesis-spec",title:"Chain Specification",description:"Learn how basis chain and genesis configurations work in FRAME",source:"@site/docs/Substrate/section8/chain-genesis-spec.md",sourceDirName:"Substrate/section8",slug:"/Substrate/section8/chain-genesis-spec",permalink:"/docs/Substrate/section8/chain-genesis-spec",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Substrate/section8/chain-genesis-spec.md",tags:[],version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1688139703,formattedLastUpdatedAt:"Jun 30, 2023",frontMatter:{id:"chain-genesis-spec",title:"Chain Specification",sidebar_label:"Chain Specification",description:"Learn how basis chain and genesis configurations work in FRAME"},sidebar:"substrate",previous:{title:"Pallet Coupling",permalink:"/docs/Substrate/section8/pallet-coupling"},next:{title:"Introduction to Benchmarking",permalink:"/docs/Substrate/section8/benchmarking"}},c={},l=[{value:"<code>chain_spec.rs</code> Overview",id:"chain_specrs-overview",level:2},{value:"Modifying Your Chain Spec",id:"modifying-your-chain-spec",level:2},{value:"Example: Changing the name of your chain",id:"example-changing-the-name-of-your-chain",level:3}],p={toc:l},u="wrapper";function d(e){let{components:n,...o}=e;return(0,a.kt)(u,(0,i.Z)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"chain specification")," describes any Substrate-based network.  Located in ",(0,a.kt)("inlineCode",{parentName:"p"},"node/src/chain_spec.rs"),", the chain specification describes the initial state of the network via the ",(0,a.kt)("inlineCode",{parentName:"p"},"ChainSpec")," struct, which is usually exported as a JSON file using the ",(0,a.kt)("inlineCode",{parentName:"p"},"substrate build-spec")," command."),(0,a.kt)("p",null,"When we start our chain in developmental mode, we have a set of pre-defined, funded accounts (",(0,a.kt)("inlineCode",{parentName:"p"},"endowed_accounts"),").  These accounts are inside ",(0,a.kt)("inlineCode",{parentName:"p"},"chain_spec.rs")," where default accounts, the chain's name, id, sudo accounts, and more are defined."),(0,a.kt)("h2",{id:"chain_specrs-overview"},(0,a.kt)("inlineCode",{parentName:"h2"},"chain_spec.rs")," Overview"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"chain_spec.rs")," file describes a Substrate-based chain.  It includes numerous functions, each defining a particular aspect of the configuration.  The most notable functions are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fn testnet_genesis()")," -> Defines the initial pallet state, including the Wasm runtime.  "),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fn development_config()")," -> Defines the developmental instance of the node.  Uses ",(0,a.kt)("inlineCode",{parentName:"li"},"testnet_genesis()")," to configure the state of the development state.")),(0,a.kt)("admonition",{title:"Why does my chain progress in development mode with only one node?",type:"info"},(0,a.kt)("p",{parentName:"admonition"},"If you have run ",(0,a.kt)("inlineCode",{parentName:"p"},"cargo run --release")," on its own, and the chain doesn't progress, that's because it requires at least two authorities to start authoring blocks.  The developmental configuration only requires a single validator, ",(0,a.kt)("inlineCode",{parentName:"p"},"Alice"),".")),(0,a.kt)("h2",{id:"modifying-your-chain-spec"},"Modifying Your Chain Spec"),(0,a.kt)("p",null,"It is possible to modify these functions to define your chain's initial state.  New authorities for validation could be added, fund other accounts other than the \"well-known\" accounts, and any registered pallets' initial state can be modified in general."),(0,a.kt)("h3",{id:"example-changing-the-name-of-your-chain"},"Example: Changing the name of your chain"),(0,a.kt)("p",null,"Navigate to ",(0,a.kt)("inlineCode",{parentName:"p"},"development_config()")," and find the following lines:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn development_config() -> Result<ChainSpec, String> {\n    let wasm_binary = WASM_BINARY.ok_or_else(|| "Development wasm not available".to_string())?;\n\n    Ok(ChainSpec::from_genesis(\n        // Name\n        "Development",\n...\n')),(0,a.kt)("p",null,"Go ahead and change the name to whatever you like.  By the end, it should look like this: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'pub fn development_config() -> Result<ChainSpec, String> {\n    let wasm_binary = WASM_BINARY.ok_or_else(|| "Development wasm not available".to_string())?;\n\n    Ok(ChainSpec::from_genesis(\n        // Name\n        "TechEd Development Chain",\n...\n')),(0,a.kt)("p",null,"If you run your node and navigate to Polkadot.js, it should show in the upper left:"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Development Chain Name PolkadotJs",src:t(7476).Z,width:"603",height:"106"})))}d.isMDXComponent=!0},7476:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/chain_name-14a5234d5b3ea7dfc0fc7e539cb95c99.png"}}]);