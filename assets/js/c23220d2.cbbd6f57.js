"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[724],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=s,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,a=new Array(i);a[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:s,a[1]=o;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9264:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(7462),s=(n(7294),n(3905));const i={id:"vectors-vs-strings",title:"Vectors, Strings, and &str Slices",sidebar_label:"Vectors, Strings, and &str Slices",description:"Learn the difference between vectors and strings in Rust."},a=void 0,o={unversionedId:"Rust/section5/vectors-vs-strings",id:"Rust/section5/vectors-vs-strings",title:"Vectors, Strings, and &str Slices",description:"Learn the difference between vectors and strings in Rust.",source:"@site/docs/Rust/section5/vectors-vs-strings.md",sourceDirName:"Rust/section5",slug:"/Rust/section5/vectors-vs-strings",permalink:"/docs/Rust/section5/vectors-vs-strings",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Rust/section5/vectors-vs-strings.md",tags:[],version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1693238811,formattedLastUpdatedAt:"Aug 28, 2023",frontMatter:{id:"vectors-vs-strings",title:"Vectors, Strings, and &str Slices",sidebar_label:"Vectors, Strings, and &str Slices",description:"Learn the difference between vectors and strings in Rust."},sidebar:"rust",previous:{title:"Defining Methods for Structs",permalink:"/docs/Rust/section5/struct-methods"},next:{title:"Intro to Advanced Rust - Traits, Generics, & Lifetimes",permalink:"/docs/Rust/section6/"}},l={},c=[{value:"When to use a string slice versus a String?",id:"when-to-use-a-string-slice-versus-a-string",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,s.kt)(d,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"It can be rather confusing for a beginner to wrap their head around how these various types relate\nand how they work together."),(0,s.kt)("p",null,"To summarize:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A ",(0,s.kt)("inlineCode",{parentName:"li"},"String")," is a data structure that is essentially a wrapped, ",(0,s.kt)("em",{parentName:"li"},"managed")," ",(0,s.kt)("inlineCode",{parentName:"li"},"Vec<T>"),". It represents a\nlist of UTF-8 bytes that are stored on the heap. It is useful for defining typical words and\nsentences in a mutable fashion and can be modified during the runtime. Recall a ",(0,s.kt)("inlineCode",{parentName:"li"},"String")," is just a\nstruct, meaning it owns the fields within. In this case, it owns the bytes that you write to it."),(0,s.kt)("li",{parentName:"ul"},"String literals/slices, or ",(0,s.kt)("inlineCode",{parentName:"li"},"&str"),", are immutable, predefined slices of UTF-8 bytes that are\ndefined at ",(0,s.kt)("strong",{parentName:"li"},"compile-time"),", not runtime. They are either stored as ",(0,s.kt)("inlineCode",{parentName:"li"},"'static"),", aka part of the\nexecutable in static storage, or on the stack. It is also fixed-length."),(0,s.kt)("li",{parentName:"ul"},"A ",(0,s.kt)("inlineCode",{parentName:"li"},"Vec<T>")," is a data structure that is more generic in nature, as it allows for ",(0,s.kt)("em",{parentName:"li"},"any")," data type to\nbe passed in to form a managed list.")),(0,s.kt)("h2",{id:"when-to-use-a-string-slice-versus-a-string"},"When to use a string slice versus a String?"),(0,s.kt)("p",null,"Remember, slices are ",(0,s.kt)("strong",{parentName:"p"},'"view-only", immutable references'),". ",(0,s.kt)("inlineCode",{parentName:"p"},"String")," should be used when you require\na growable, ownable collection of bytes. ",(0,s.kt)("inlineCode",{parentName:"p"},"String")," is more costly - within most programs, it is not\nan issue, but in some environments, it may be better to utilize string slices whenever possible."),(0,s.kt)("p",null,"String slices can also be converted to a ",(0,s.kt)("inlineCode",{parentName:"p"},"String")," rather easily:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'\nlet literal_to_string: String = "Hello".to_string();\n\n')))}p.isMDXComponent=!0}}]);