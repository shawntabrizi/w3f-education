"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[7802],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,m=u["".concat(l,".").concat(h)]||u[h]||d[h]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5407:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={id:"collections",title:"Collections in Rust - Vectors, Strings, Hashmaps",sidebar_label:"Collections - Vectors, Strings, Hashmaps",description:"Learn what collections are, and when to use which in Rust."},i=void 0,s={unversionedId:"Rust/section5/collections",id:"Rust/section5/collections",title:"Collections in Rust - Vectors, Strings, Hashmaps",description:"Learn what collections are, and when to use which in Rust.",source:"@site/docs/Rust/section5/collections.md",sourceDirName:"Rust/section5",slug:"/Rust/section5/collections",permalink:"/docs/Rust/section5/collections",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Rust/section5/collections.md",tags:[],version:"current",lastUpdatedBy:"bader y",lastUpdatedAt:1680710501,formattedLastUpdatedAt:"Apr 5, 2023",frontMatter:{id:"collections",title:"Collections in Rust - Vectors, Strings, Hashmaps",sidebar_label:"Collections - Vectors, Strings, Hashmaps",description:"Learn what collections are, and when to use which in Rust."},sidebar:"rust",previous:{title:"Intro to Intermediate Rust - Data Structs & Collections",permalink:"/docs/Rust/section5/"},next:{title:"Data Structs",permalink:"/docs/Rust/section5/structs"}},l={},c=[{value:"Vectors",id:"vectors",level:2},{value:"Strings",id:"strings",level:2},{value:"Hashmaps",id:"hashmaps",level:2},{value:"Try it yourself!",id:"try-it-yourself",level:2},{value:"What&#39;s happening here?",id:"whats-happening-here",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"We've already dealt with several collections.  Rust's standard library provides these data structures and aid in ",(0,r.kt)("strong",{parentName:"p"},"dynamic")," data manipulation and representation.  Similar to arrays and tuples, collections can store more than value.  In contrast to such compound types, collections point to items stored on the ",(0,r.kt)("strong",{parentName:"p"},"heap"),".    The benefit of it being managed on the heap allows collections to be growable and generally more modifiable in runtime.  One collection you have already encountered numerous times throughout this course is ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),", which represents a list of characters."),(0,r.kt)("p",null,"There are three commonly used collections in Rust: "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Vectors -  re-sizable arrays. Like slices, their size is not known at compile time, but they can grow or shrink at any time. "),(0,r.kt)("li",{parentName:"ul"},"Hashmaps - key-value data structures that store a ",(0,r.kt)("strong",{parentName:"li"},"map")," of information."),(0,r.kt)("li",{parentName:"ul"},"Strings - a collection of characters that are stored on the heap.")),(0,r.kt)("h2",{id:"vectors"},"Vectors"),(0,r.kt)("p",null,"The official type declaration of a vector is ",(0,r.kt)("inlineCode",{parentName:"p"},"Vec<T>"),", which represents a list of any generic type ",(0,r.kt)("inlineCode",{parentName:"p"},"T"),".  We'll go over generics in the next module, but for now, know it is used exactly how ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," is used in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Option<T>")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Result<T, E>")," enums.  Like arrays, Vectors can only store values of the same type."),(0,r.kt)("p",null,"To create a new, empty vector, we call the associated method ",(0,r.kt)("inlineCode",{parentName:"p"},"new()"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let vector: Vec<i32> = Vec::new();\n// Optionally, one may also use the `vec!` macro with initialized values.  Type is inferred.\nlet vector = vec![1, 2, 3];\n")),(0,r.kt)("p",null,"Now that the vector is defined, it exposes several methods which we can use to manipulate it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// Initialize a new vector\nlet vector: Vec<i32> = Vec::new();\n\n// Push new items to it\nvector.push(2); // [2]\nvector.push(3); // [2, 3]\nvector.push(4); // [2, 3, 4]\n\n// Reading via .get()\nlet four: Option<i32> = vector.get(2) // retrieves an Option, which can be pattern matched\n\n// Reading a vector via indexing - same as an array\n// use with caution, the index may not exist!\nlet four: i32 = &vector[2];\n")),(0,r.kt)("p",null,"A vector follows all rules of the borrow checker - meaning if the vector is mutable, then an immutable reference to an element is impossible.  Vectors also aren't limited to scalar types - you may define a struct, and store a list of structs within a vector if desired."),(0,r.kt)("h2",{id:"strings"},"Strings"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," collection should be very familiar by now.  ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," is a collection of characters stored on the heap.  The ",(0,r.kt)("inlineCode",{parentName:"p"},"&str")," type, or string slice/literal is different from this type, as it's a primitive type, whereas ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," is a data structure part of the Rust standard library.  At its core, a String is a wrapped ",(0,r.kt)("inlineCode",{parentName:"p"},"Vec")," of bytes.  "),(0,r.kt)("p",null,"Strings are rather complicated yet advantageous data structures.  If you want to learn more about Strings at a more technical level, please read the ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/stable/book/"},"Rust book"),", as this is just meant to introduce how to use ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),"."),(0,r.kt)("p",null,"To create a new ",(0,r.kt)("inlineCode",{parentName:"p"},"String"),", use the associated function ",(0,r.kt)("inlineCode",{parentName:"p"},"new()"),", along with others:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// An empty string\nlet s = String::new();\n\n// Push a string literal to a String\ns.push_str(\"Web\");\n\n// Push a single char using .push()\ns.push('3');\n")),(0,r.kt)("h2",{id:"hashmaps"},"Hashmaps"),(0,r.kt)("p",null,"Hashmaps store a mapping of ",(0,r.kt)("inlineCode",{parentName:"p"},"K")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"V"),", and in other languages, are often to referred to as a map, dictionary, or hash table.  As with ",(0,r.kt)("inlineCode",{parentName:"p"},"T")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"Vec<T>"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"K")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"V")," are generic types used to refer to ",(0,r.kt)("em",{parentName:"p"},"any")," type.  As with vectors, values within the hashmap are stored on the heap.  If an external variable is placed as part of a hashmap insertion, then the hashmap owns that variable."),(0,r.kt)("p",null,"To create a new hashmap, the associated method ",(0,r.kt)("inlineCode",{parentName:"p"},"new()")," is also used: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"let mut balances = Hashmap::new();\n")),(0,r.kt)("p",null,"To add new values to the ",(0,r.kt)("inlineCode",{parentName:"p"},"balances")," map.  This particular mapping maps a ",(0,r.kt)("inlineCode",{parentName:"p"},"String")," to an ",(0,r.kt)("inlineCode",{parentName:"p"},"i32"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'balances.insert(String::from("Bader"), 100);\n')),(0,r.kt)("p",null,"To access a value, a ",(0,r.kt)("inlineCode",{parentName:"p"},".get(key: K)")," method is also exposed, upon which the value may be fetched by a reference to the key (so as to prevent ownership):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let mut balances = Hashmap::new();\nbalances.insert(String::from("Bader"), 100);\nlet key = String::from("Bader");\nlet bader_bal: Option<i32> = balances.get(&key);\n')),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Option")," returned must be adequately handled via pattern matching, or a default value must be provided to ",(0,r.kt)("inlineCode",{parentName:"p"},"bader_bal"),".  "),(0,r.kt)("h2",{id:"try-it-yourself"},"Try it yourself!"),(0,r.kt)("iframe",{width:"100%",height:"580",src:"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=use+std%3A%3Acollections%3A%3AHashMap%3B%0A%0A%0Afn+main%28%29+%7B%0A%2F%2F+VECTORS%21%0A++++%2F%2F+Declare+a+new.+empty+vector%0A++++let+mut+vector%3A+Vec%3Ci32%3E+%3D+Vec%3A%3Anew%28%29%3B%0A++%0A++++%2F%2F+Add+new+elements+to+the+vector%0A++++vector.push%282%29%3B+%2F%2F+%5B2%5D%0A++++vector.push%283%29%3B+%2F%2F+%5B2%2C+3%5D%0A++++vector.push%284%29%3B+%2F%2F+%5B2%2C+3%2C+4%5D%0A++++%0A++++%2F%2F+Reading+via+.get%28%29%0A++++let+four%3A+Option%3C%26i32%3E+%3D+vector.get%282%29%3B+%2F%2F+retrieves+an+Option%2C+which+can+be+pattern+matched%0A++++%0A++++%2F%2F+Reading+a+vector+via+indexing+-+same+as+an+array%0A++++%2F%2F+use+with+caution%2C+the+index+may+not+exist%21%0A++++let+four%3A+%26i32+%3D+%26vector%5B2%5D%3B%0A++++%0A%0A%2F%2F+STRINGS%21%0A++++%2F%2F+An+empty+string%0A++++let+mut+s+%3D+String%3A%3Anew%28%29%3B%0A++++%2F%2F+Push+a+string+literal+to+a+String%0A++++s.push_str%28%22Web%22%29%3B%0A++++%2F%2F+Push+a+single+char+using+.push%28%29%0A++++s.push%28%273%27%29%3B%0A%0A%2F%2F+HASHMAPS%21%0A++++%2F%2F+An+empty+hashmap%0A++++let+mut+balances+%3D+HashMap%3A%3Anew%28%29%3B%0A++++%2F%2F+Insert+a+key%2C+value+type+of+String+-%3E+i32+%28a+name+to+balance%29%0A++++balances.insert%28String%3A%3Afrom%28%22Bader%22%29%2C+100%29%3B%0A++++%2F%2F+Create+a+key%2C+aka+a+String%0A++++let+key+%3D+String%3A%3Afrom%28%22Bader%22%29%3B%0A++++let+bader_bal%3A+Option%3C%26i32%3E+%3D+balances.get%28%26key%29%3B%0A%0A%7D%0A"}),(0,r.kt)("h2",{id:"whats-happening-here"},"What's happening here?"),(0,r.kt)("p",null,"All three collections and their common, respective operations are shown above.  For more info, be sure to checkout the ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/book/ch08-00-common-collections.html"},"Rust Book")," as well as the ",(0,r.kt)("a",{parentName:"p",href:"https://doc.rust-lang.org/std/index.html"},"Rust Standard Library's")," documentation for each of these data structures."))}d.isMDXComponent=!0}}]);