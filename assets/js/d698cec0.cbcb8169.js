"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[5338],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),f=r,m=d["".concat(s,".").concat(f)]||d[f]||u[f]||a;return n?i.createElement(m,o(o({ref:t},p),{},{components:n})):i.createElement(m,o({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5218:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var i=n(7462),r=n(3366),a=(n(7294),n(3905)),o=["components"],l={id:"lifetimes",title:"Lifetimes in Rust",sidebar_label:"Lifetimes",description:"Learn the Rust lifetime model."},s=void 0,c={unversionedId:"Rust/section6/lifetimes",id:"Rust/section6/lifetimes",isDocsHomePage:!1,title:"Lifetimes in Rust",description:"Learn the Rust lifetime model.",source:"@site/docs/Rust/section6/lifetimes.md",sourceDirName:"Rust/section6",slug:"/Rust/section6/lifetimes",permalink:"/docs/Rust/section6/lifetimes",editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Rust/section6/lifetimes.md",version:"current",lastUpdatedBy:"bader y",lastUpdatedAt:1681226859,formattedLastUpdatedAt:"4/11/2023",frontMatter:{id:"lifetimes",title:"Lifetimes in Rust",sidebar_label:"Lifetimes",description:"Learn the Rust lifetime model."},sidebar:"rust",previous:{title:"Associated Types vs Generic Types",permalink:"/docs/Rust/section6/associated-generics"},next:{title:"Intro to Advanced Rust - Iterators & Closures",permalink:"/docs/Rust/section7/section-7-intro"}},p=[{value:"When to Declare Explicit Lifetimes",id:"when-to-declare-explicit-lifetimes",children:[]},{value:"Lifetime Annotations",id:"lifetime-annotations",children:[{value:"Annotating Functions",id:"annotating-functions",children:[]}]},{value:"Static Lifetimes",id:"static-lifetimes",children:[]},{value:"Try it yourself!",id:"try-it-yourself",children:[]},{value:"What&#39;s happening here?",id:"whats-happening-here",children:[]}],u={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"If you recall, in the Ownership section of this course, a value in Rust is only as valid as its scope.  Once it is out of scope, it is out of memory and disregarded.  This concept is called a ",(0,a.kt)("strong",{parentName:"p"},"lifetime"),".  Every reference in Rust has a ",(0,a.kt)("strong",{parentName:"p"},"lifetime"),", although they are mostly inferred."),(0,a.kt)("h2",{id:"when-to-declare-explicit-lifetimes"},"When to Declare Explicit Lifetimes"),(0,a.kt)("p",null,"Lifetimes are also generic, and are used to ",(0,a.kt)("strong",{parentName:"p"},"validate")," references.  In essence, the lifetime is defined by the scope in which a particular reference is deemed valid.  In other words, it uses the ",(0,a.kt)("strong",{parentName:"p"},"borrow checker")," to ensure that dangling pointers don't occur."),(0,a.kt)("p",null,"Borrows are as valid as the source:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() { // Lifetime "A", or \'a.\n    let y;\n    { // Lifetime "B", or \'b.\n        let x = 10;\n        y = &x;\n    }\n    // y here would be "dangling", as x is no longer "living".\n    println!("{y}");\n}\n')),(0,a.kt)("p",null,"The compiler tells the entire story of ",(0,a.kt)("em",{parentName:"p"},"why")," this cannot work:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'Compiling playground v0.0.1 (/playground)\nerror[E0597]: `x` does not live long enough\n--\x3e src/main.rs:5:13\n |\n5 |         y = &x;\n |             ^^ borrowed value does not live long enough\n6 |     }\n |     - `x` dropped here while still borrowed\n7 |     // y here would be "dangling", as x is no longer "living".\n8 |     println!("{y}");\n |                - borrow later used here\n')),(0,a.kt)("p",null," Notice here that we have not explicitly defined lifetimes - as they are implicitly done for us."),(0,a.kt)("h2",{id:"lifetime-annotations"},"Lifetime Annotations"),(0,a.kt)("p",null,"Lifetime annotations, as mentioned, are generics.  They follow the convention of an apostrophe, ",(0,a.kt)("inlineCode",{parentName:"p"},"'"),", followed by the letter of going from ",(0,a.kt)("inlineCode",{parentName:"p"},"a")," onwards."),(0,a.kt)("h3",{id:"annotating-functions"},"Annotating Functions"),(0,a.kt)("p",null,"To annotate a function with an explicit lifetime, use ",(0,a.kt)("inlineCode",{parentName:"p"},"'a")," like any other generic.  ",(0,a.kt)("inlineCode",{parentName:"p"},"'a")," essentially means as long as the function is still alive:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn bad_lifetime<'a>() -> &'a i32 {\n    let _x: i32 = 19;\n    // ERROR: `_x` does not live long enough; it gets dropped at the end of the function!\n    let y: &'a i32 = &_x;\n    y\n}\n")),(0,a.kt)("p",null,"However, as the function name suggests - this does not work, as ",(0,a.kt)("inlineCode",{parentName:"p"},"_x")," does not live long enough and is deallocated from memory.  ",(0,a.kt)("inlineCode",{parentName:"p"},"y")," then points to that deallocated memory, which is a prime example of a ",(0,a.kt)("strong",{parentName:"p"},"dangling pointer"),".  To fix this, we must ensure that ",(0,a.kt)("inlineCode",{parentName:"p"},"_x")," is a reference that has the same lifetime as ",(0,a.kt)("inlineCode",{parentName:"p"},"y")," as well as the function itself."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"fn fixed_lifetime<'a>() -> &'a i32 {\n    let _x: &'a i32 = &19;\n    _x\n}\n")),(0,a.kt)("h2",{id:"static-lifetimes"},"Static Lifetimes"),(0,a.kt)("p",null,"A unique lifetime is called ",(0,a.kt)("inlineCode",{parentName:"p"},"'static"),", which explicitly defines a reference as something that can live for the entirety of the program.  A prime example of a ",(0,a.kt)("inlineCode",{parentName:"p"},"'static")," lifetime is ",(0,a.kt)("inlineCode",{parentName:"p"},"&'static str"),", or string literals, as they are stored in the program's binary, making them always available."),(0,a.kt)("h2",{id:"try-it-yourself"},"Try it yourself!"),(0,a.kt)("iframe",{width:"100%",height:"580",src:"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=%0Afn+fixed_lifetime%3C%27a%3E%28%29+-%3E+%26%27a+i32+%7B%0A++++let+_x%3A+%26%27a+i32+%3D+%2619%3B%0A++++_x%0A%7D%0A%0Afn+main%28%29+%7B%0A++++%0A++++let+a+%3D+fixed_lifetime%28%29%3B%0A++++println%21%28%22%7B%7D%22%2C+a%29%3B%0A++++%0A%7D"}),(0,a.kt)("h2",{id:"whats-happening-here"},"What's happening here?"),(0,a.kt)("p",null,"Lifetimes prevent dangling pointers via the Rust borrow checker. In the above example, a fixed lifetime is defined.  This lifetime is valid because the lifetime, labeled ",(0,a.kt)("inlineCode",{parentName:"p"},"'a"),", on ",(0,a.kt)("inlineCode",{parentName:"p"},"_x")," matches that of the function signature ",(0,a.kt)("inlineCode",{parentName:"p"},"<'a>"),"."))}d.isMDXComponent=!0}}]);