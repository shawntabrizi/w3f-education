"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[7232],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),d=a,f=u["".concat(s,".").concat(d)]||u[d]||h[d]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1214:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={id:"pallet-coupling",title:"Pallet Coupling",sidebar_label:"Pallet Coupling",description:"Learn how to couple pallets to each other, and the differences between tight and loose (and when to use which)."},i=void 0,l={unversionedId:"Substrate/section8/pallet-coupling",id:"Substrate/section8/pallet-coupling",title:"Pallet Coupling",description:"Learn how to couple pallets to each other, and the differences between tight and loose (and when to use which).",source:"@site/docs/Substrate/section8/pallet-coupling.md",sourceDirName:"Substrate/section8",slug:"/Substrate/section8/pallet-coupling",permalink:"/docs/Substrate/section8/pallet-coupling",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Substrate/section8/pallet-coupling.md",tags:[],version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1693238811,formattedLastUpdatedAt:"Aug 28, 2023",frontMatter:{id:"pallet-coupling",title:"Pallet Coupling",sidebar_label:"Pallet Coupling",description:"Learn how to couple pallets to each other, and the differences between tight and loose (and when to use which)."},sidebar:"substrate",previous:{title:"Origins (Privileged Calls) in FRAME",permalink:"/docs/Substrate/section8/origins-calls"},next:{title:"Chain Specification",permalink:"/docs/Substrate/section8/chain-genesis-spec"}},s={},p=[{value:"Loose Coupling",id:"loose-coupling",level:2},{value:"Tight Coupling",id:"tight-coupling",level:2},{value:"Which to use?",id:"which-to-use",level:2}],c={toc:p},u="wrapper";function h(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Pallets can use each other as dependencies to access their specific functionalities. For example, we\nuse ",(0,a.kt)("inlineCode",{parentName:"p"},"pallet_balance")," to access our pallet's underlying balances and lock statuses."),(0,a.kt)("p",null,"This is referred to as ",(0,a.kt)("strong",{parentName:"p"},"pallet coupling"),", and they define how pallets can interact with each other\non a software level. This is similar to object-oriented programming, where tight and loose coupling\nindicates the relationship between two data structures. In Rust, this refers to how various traits\nand associated types are used with one another so that they may call upon each other's respective\nmethods and implementations."),(0,a.kt)("h2",{id:"loose-coupling"},"Loose Coupling"),(0,a.kt)("p",null,"Our pallet used ",(0,a.kt)("strong",{parentName:"p"},"loose")," coupling, as we merely utilized an exposed trait from the Balances pallet\n(",(0,a.kt)("inlineCode",{parentName:"p"},"Currency"),"). We further stated that we wish for our notion of ",(0,a.kt)("inlineCode",{parentName:"p"},"Currency")," also to contain the traits\n",(0,a.kt)("inlineCode",{parentName:"p"},"ReservableCurrency")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"LockableCurrency"),", which further opens up our configuration to potentially\nother pallets:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"// Loosely including Currency in the configuration\n/// Configure the pallet by specifying the parameters and types it depends on.\n#[pallet::config]\npub trait Config: frame_system::Config {\n    ...\n    type Currency: ReservableCurrency<Self::AccountId>\n        + LockableCurrency<Self::AccountId, Moment = Self::BlockNumber>;\n    ...\n}\n")),(0,a.kt)("h2",{id:"tight-coupling"},"Tight Coupling"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Tight")," coupling a pallet involves explicitly declaring an entire, ",(0,a.kt)("strong",{parentName:"p"},"specific")," pallet as a\ndependency. This would also mean that this pallet has to be within your pallet's ",(0,a.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," file,\nprecisely just that specific pallet's instance. An example of this is the Bounties pallet, which\ntightly couples the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/substrate/tree/master/frame/treasury"},"Treasury"),"\npallet to it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"/// Notice the use of the '+' operator to tightly couple the Config of pallet_treasury\npub trait Config<I: 'static = ()>: frame_system::Config + pallet_treasury::Config<I> {}\n")),(0,a.kt)("p",null,"Tightly coupling two pallets in this manner is helpful when they share very similar goals and\nobjectives and for pallets that are simple enough. Because the\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/substrate/tree/master/frame/bounties"},"Bounties")," pallet solely depends\non the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/paritytech/substrate/tree/master/frame/treasury"},"Treasury")," pallet for\npayouts (and its subsequent types), it is sensible to couple it tightly."),(0,a.kt)("h2",{id:"which-to-use"},"Which to use?"),(0,a.kt)("p",null,"Overall, for maintainability and flexibility, loosely coupling is preferred. The benefit of loosely\ncoupling our pallet was to reduce the apparent need to bring in the entire pallet versus just\nutilizing the traits you need."))}h.isMDXComponent=!0}}]);