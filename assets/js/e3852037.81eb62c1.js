"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[4799],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,h=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6155:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return p}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),o=["components"],l={id:"traits",title:"Defining behavior with Traits",sidebar_label:"Traits",description:"Learn how to bring data structs to life with traits in Rust."},s=void 0,c={unversionedId:"Rust/section6/traits",id:"Rust/section6/traits",isDocsHomePage:!1,title:"Defining behavior with Traits",description:"Learn how to bring data structs to life with traits in Rust.",source:"@site/docs/Rust/section6/traits.md",sourceDirName:"Rust/section6",slug:"/Rust/section6/traits",permalink:"/docs/Rust/section6/traits",editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Rust/section6/traits.md",version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1683568667,formattedLastUpdatedAt:"5/8/2023",frontMatter:{id:"traits",title:"Defining behavior with Traits",sidebar_label:"Traits",description:"Learn how to bring data structs to life with traits in Rust."},sidebar:"rust",previous:{title:"Intro to Advanced Rust - Traits, Generics, & Lifetimes",permalink:"/docs/Rust/section6/section-6-intro"},next:{title:"Generic Types",permalink:"/docs/Rust/section6/generics"}},p=[{value:"Creating a Trait",id:"creating-a-trait",children:[]},{value:"Common Traits in Rust",id:"common-traits-in-rust",children:[{value:"Using the derive macro",id:"using-the-derive-macro",children:[]}]},{value:"Implementing a Trait on an &quot;Account&quot; struct",id:"implementing-a-trait-on-an-account-struct",children:[]},{value:"Trait Parameters &amp; Bounds",id:"trait-parameters--bounds",children:[]},{value:"Try it yourself!",id:"try-it-yourself",children:[]},{value:"What&#39;s happening here?",id:"whats-happening-here",children:[]}],m={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"There is no genuine concept of object-oriented-style inheritance in Rust. ",(0,i.kt)("strong",{parentName:"p"},"Traits")," introduce the notion of defining shared behavior for data structures.  A trait defines a set of shared functions, expectations, and behavior that can be used for an indefinite number of types."),(0,i.kt)("h2",{id:"creating-a-trait"},"Creating a Trait"),(0,i.kt)("p",null,"Defining a trait utilizes the ",(0,i.kt)("inlineCode",{parentName:"p"},"trait")," keyword, followed by the name of the trait.  In this example, notice the use of the ",(0,i.kt)("inlineCode",{parentName:"p"},"pub")," (public) keyword.  This exposes the trait to any external files within a Rust crate and project to utilize:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"pub trait Transferrable {\n    fn transfer(&mut self, who: &mut Self, amount: i32) -> i32;\n}\n")),(0,i.kt)("p",null,"This function defines a trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferrable"),", which also defines a ",(0,i.kt)("strong",{parentName:"p"},"method signature"),", called ",(0,i.kt)("inlineCode",{parentName:"p"},"transfer"),".  This signature is a blueprint for what we expect from any type that ",(0,i.kt)("em",{parentName:"p"},"implements")," ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferrable")," as a trait. As implied by the name, this trait would allow a type to send currency from the caller to ",(0,i.kt)("inlineCode",{parentName:"p"},"who"),". The use of this trait would allow for a particular type to now possess these methods in order to achieve this functionality."),(0,i.kt)("p",null,"In order these methods to be used, however, they must be implemented on that specific type."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Take note of the difference of usage between ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Self"),".  Remember, ",(0,i.kt)("inlineCode",{parentName:"p"},"self")," refers to an already ",(0,i.kt)("em",{parentName:"p"},"instantiated")," instance of that type, whereas ",(0,i.kt)("inlineCode",{parentName:"p"},"Self")," refers to simply that type.  The use of ",(0,i.kt)("inlineCode",{parentName:"p"},"Self")," here allows for this trait to look for the specific type being implemented when it comes to ",(0,i.kt)("inlineCode",{parentName:"p"},"who")," should receive currency."))),(0,i.kt)("h2",{id:"common-traits-in-rust"},"Common Traits in Rust"),(0,i.kt)("p",null,"As you may have already seen, there are quite a few traits that are used in Rust.  A few common traits are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/fmt/trait.Debug.html"},"Debug")," - formats the output in a debugging context."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/cmp/trait.PartialEq.html"},"PartialEq")," - A trait for equality comparisons."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://doc.rust-lang.org/std/clone/trait.Clone.html"},"Clone"),' - Describes how a new value can be created, or "Cloned".')),(0,i.kt)("p",null,"There are many more, but these, when used in conjunction with the ",(0,i.kt)("inlineCode",{parentName:"p"},"derive")," macro with structs, can be very useful in making structs more pleasant to handle."),(0,i.kt)("h3",{id:"using-the-derive-macro"},"Using the derive macro"),(0,i.kt)("p",null,"A line you may have encountered above a ",(0,i.kt)("inlineCode",{parentName:"p"},"struct")," declaration is ",(0,i.kt)("inlineCode",{parentName:"p"},"#[derive()]"),".  This is what is called a ",(0,i.kt)("strong",{parentName:"p"},"procedural macros"),", which create a sort of auto-implementation for a set of compatible traits.  Between the parentheses, any traits compatible with this macro, along with the struct's fields within can be implemented:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(PartialEq)]\nstruct Stormtrooper {\n    name: String\n}\n")),(0,i.kt)("p",null,"Because ",(0,i.kt)("inlineCode",{parentName:"p"},"String")," also implements ",(0,i.kt)("inlineCode",{parentName:"p"},"PartialEq"),", this is perfectly acceptable and easier than fully writing out the implementation for this particular trait.  It's a shorthand way of implementing common traits within the standard library. Without ",(0,i.kt)("inlineCode",{parentName:"p"},"PartialEq")," in this context, we wouldn't be able to utilize the equality operator (",(0,i.kt)("inlineCode",{parentName:"p"},"=="),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'let stormtrooper_one = StormTrooper { "Stormtrooper 1".to_string() };\nlet stormtrooper_two = StormTrooper { "Stormtrooper 2".to_string() };\n\n// Possible due to PartialEq! No need for a full trait implementation.\nprintln!("Is Stormtrooper One equal to Stormtrooper Two: {}", stormtrooper_one == stormtrooper_two);\n')),(0,i.kt)("h2",{id:"implementing-a-trait-on-an-account-struct"},'Implementing a Trait on an "Account" struct'),(0,i.kt)("p",null,"To implement (",(0,i.kt)("inlineCode",{parentName:"p"},"impl"),") this trait, we will create a struct called ",(0,i.kt)("inlineCode",{parentName:"p"},"Account"),", which will also be marked as ",(0,i.kt)("inlineCode",{parentName:"p"},"pub"),":"),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Here, the concept of an ",(0,i.kt)("inlineCode",{parentName:"p"},"Account")," is more in the context of a blockchain, where an account has some identification (",(0,i.kt)("inlineCode",{parentName:"p"},"id"),", in this case, although this could also be an address) and a monetary balance.  This theme will become more present throughout the course, as these terms will become more prevalent when learning more about developing with ",(0,i.kt)("a",{parentName:"p",href:"https://substrate.io/"},"Substrate"),"."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"pub struct Account {\n   pub id: i32,\n   pub balance: i32,\n   pub is_legit: bool,\n}\n\nimpl Transferrable for Account {}\n")),(0,i.kt)("p",null,"If the above code was run, we'd be presented with this error:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"error[E0046]: not all trait items implemented, missing: `transfer`\n  --\x3e src/main.rs:11:1\n   |\n8  |     fn transfer(&mut self, who: &mut Self, amount: i32) -> i32;\n   |     ------------------------------------------- `transfer` from trait\n...\n11 | impl Transferrable for Account {}\n   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `transfer` in implementation\n\nFor more information about this error, try `rustc --explain E0046`.\n")),(0,i.kt)("p",null,"As the compiler clearly says - we must implement all method signatures for this implementation!"),(0,i.kt)("p",null,"Now, we may implement our ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferrable")," trait to properly reflect the method signatures:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"impl Transferrable for Account {\n    fn transfer(&mut self, who: &mut Self, amount: i32) -> i32 {\n        // Take from our (self) balance,\n        self.balance = self.balance - amount;\n        // Add that amount to someone else's balance,\n        who.balance = who.balance + amount;\n        // return our remaining balance.\n        self.balance\n    }\n}\n")),(0,i.kt)("p",null,"Because we implemented ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferrable")," with this type, now any instance of the account struct can utilize the ",(0,i.kt)("inlineCode",{parentName:"p"},"transfer()")," method and ensure ",(0,i.kt)("strong",{parentName:"p"},"shared")," behavior:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'    let mut alice = Account {\n        id: 1,\n        balance: 100,\n        is_legit: true,\n    };\n\n    let mut bob = Account {\n        id: 2,\n        balance: 200,\n        is_legit: true,\n    };\n\n    // In theory, account two could also easily call this!\n    alice.transfer(&mut bob, 50);\n\n    println!(\n        "Account One Balance: {}, Account Two Balance: {}",\n        alice.balance, bob.balance\n    );\n')),(0,i.kt)("p",null,"In fact, ",(0,i.kt)("em",{parentName:"p"},"any")," type that ",(0,i.kt)("inlineCode",{parentName:"p"},"impl"),"s ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferrable")," can now transfer funds, so long as it's implemented correctly as per the method and trait signatures."),(0,i.kt)("p",null,"To illustrate this let us add a method signature to ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferrable")," to drain all funds from an ",(0,i.kt)("inlineCode",{parentName:"p"},"Account"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"pub trait Transferrable {\n    fn transfer(&mut self, who: &mut Self, amount: i32) -> i32;\n    /// New method signature!  Now we *have* to implement it.\n    fn drain_funds(&mut self) -> bool;\n}\n\nimpl Transferrable for Account {\n    fn transfer(&mut self, who: &mut Self, amount: i32) -> i32 {\n        // Take from our (self) balance,\n        self.balance = self.balance - amount;\n        // Add that amount to someone else's balance,\n        who.balance = who.balance + amount;\n        // return our remaining balance.\n        self.balance\n    }\n\n     fn drain_funds(&mut self) -> bool {\n        // Drain it all!\n        self.balance = 0;\n        // Really, we should have a Result that ensures that the account was successfully drained.\n        true\n     }\n}\n")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"While ",(0,i.kt)("inlineCode",{parentName:"p"},"drain_funds")," returns a ",(0,i.kt)("inlineCode",{parentName:"p"},"bool")," for simplicity, a ",(0,i.kt)("inlineCode",{parentName:"p"},"Result<T, E>")," would be more appropriate here, along with more robust checking on if the user is allowed to drain their funds or not."))),(0,i.kt)("p",null,"And as before, it's as simple as calling the ",(0,i.kt)("inlineCode",{parentName:"p"},"drain_funds")," on any type, in this case, ",(0,i.kt)("inlineCode",{parentName:"p"},"Account"),", that implements the ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferrable"),"trait:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"// Account two's balance is now 0\nbob.drain_funds();\n")),(0,i.kt)("p",null,"Feel free to define more types and implement, or even expand ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferrable")," with more methods as you see fit."),(0,i.kt)("h2",{id:"trait-parameters--bounds"},"Trait Parameters & Bounds"),(0,i.kt)("p",null,"A common use of traits is their use as ",(0,i.kt)("strong",{parentName:"p"},"bounds")," in functions, which can then be used to define ",(0,i.kt)("strong",{parentName:"p"},"parameters")," that abide by these bounds.  With generics, this becomes possible and produces very reusable code:"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"For this scenario, we added an additional method to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferrable")," trait - ",(0,i.kt)("inlineCode",{parentName:"p"},"is_legit()"),", which verifies the legitimacy of a particular entity.  This entity could be an ",(0,i.kt)("inlineCode",{parentName:"p"},"Account"),", or even something like a ",(0,i.kt)("inlineCode",{parentName:"p"},"SmartContract")," type."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn verify_entity(entity: &impl Transferrable) {\n    if entity.is_legit() {\n        println!("Entity is legit!");\n    } else {\n         println!("Entity is NOT legit!");\n    }\n}\n')),(0,i.kt)("p",null,"The function's parameter, ",(0,i.kt)("inlineCode",{parentName:"p"},"entity"),", is saying something very particular here: ",(0,i.kt)("strong",{parentName:"p"},"any")," type which implements ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferrable")," as a trait is a valid parameter.  If we were to define another type, say ",(0,i.kt)("inlineCode",{parentName:"p"},"SmartContract"),", that implemented ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferrable"),", then that would also be completely valid."),(0,i.kt)("p",null,"It can also be written using ",(0,i.kt)("em",{parentName:"p"},"trait bound syntax"),", which allows for a better view of generics at work:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'fn verify_entity<T: Transferrable>(entity: &T) {\n    if entity.is_legit() {\n        println!("Entity is legit!");\n    } else {\n         println!("Entity is NOT legit!");\n    }\n}\n')),(0,i.kt)("p",null,"To call a function like this would be quite interesting, as we would need to specify which type, so long as it abides by the trait bound ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferrable"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},"let mut account = Account {\n    id: 1,\n    balance: 100,\n};\n// Account goes in the angled brackets, as it's a type 'T' that implements 'Transferrable':\nverify_entity::<Account>(&account);\n")),(0,i.kt)("h2",{id:"try-it-yourself"},"Try it yourself!"),(0,i.kt)("iframe",{width:"100%",height:"580",src:"https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&code=pub+struct+Account+%7B%0A++++pub+id%3A+i32%2C%0A++++pub+balance%3A+i32%2C%0A%7D%0A%0Apub+trait+Transferrable+%7B%0A++++%2F%2F%2F+Return+the+new+balance.%0A++++fn+transfer%28%26mut+self%2C+who%3A+%26mut+Account%2C+amount%3A+i32%29+-%3E+i32%3B%0A++++fn+is_legit%28%26self%29+-%3E+bool%3B%0A++++fn+drain_funds%28%26mut+self%29+-%3E+bool%3B%0A%0A%7D%0A%0Aimpl+Transferrable+for+Account+%7B%0A++++fn+transfer%28%26mut+self%2C+who%3A+%26mut+Account%2C+amount%3A+i32%29+-%3E+i32+%7B%0A++++++++%2F%2F+Take+from+our+%28self%29+balance%2C%0A++++++++self.balance+%3D+self.balance+-+amount%3B%0A++++++++%2F%2F+Add+that+amount+to+someone+else%27s+balance%2C%0A++++++++who.balance+%3D+who.balance+%2B+amount%3B%0A++++++++%2F%2F+return+our+remaining+balance.%0A++++++++self.balance%0A++++%7D%0A%0A+++++fn+drain_funds%28%26mut+self%29+-%3E+bool+%7B%0A++++++++%2F%2F+Drain+it+all%21%0A++++++++self.balance+%3D+0%3B%0A++++++++%2F%2F+Really%2C+we+should+have+a+Result+that+ensures+that+the+account+was+successfully+drained.%0A++++++++true%0A+++++%7D%0A+++++%0A+++++fn+is_legit%28%26self%29+-%3E+bool+%7B%0A++++++++self.balance+%21%3D+0%0A+++++%7D%0A%7D%0A%0Afn+verify_entity%3CT%3A+Transferrable%3E%28entity%3A+%26T%29+%7B%0A++++if+entity.is_legit%28%29+%7B%0A++++++++println%21%28%22Entity+is+legit%21%22%29%3B%0A++++%7D+else+%7B%0A+++++++++println%21%28%22Entity+is+NOT+legit%21%22%29%3B%0A++++%7D%0A%7D%0A%0Afn+main%28%29+%7B%0A++++let+mut+alice+%3D+Account+%7B%0A++++++++id%3A+1%2C%0A++++++++balance%3A+100%2C%0A++++%7D%3B%0A++++let+mut+bob+%3D+Account+%7B%0A++++++++id%3A+2%2C%0A++++++++balance%3A+200%2C%0A++++%7D%3B%0A%0A++++alice.transfer%28%26mut+bob%2C+50%29%3B%0A%0A++++println%21%28%0A++++++++%22Account+One+Balance%3A+%7B%7D%2C+Account+Two+Balance%3A+%7B%7D%22%2C%0A++++++++alice.balance%2C+bob.balance%0A++++%29%3B%0A++++%0A++++bob.drain_funds%28%29%3B%0A++++%2F%2F+ALl+funds+are+gone%21%0A++++println%21%28%0A++++++++%22Account+One+Balance%3A+%7B%7D%2C+Account+Two+Balance%3A+%7B%7D%22%2C%0A++++++++alice.balance%2C+bob.balance%0A++++%29%3B%0A++++%0A++++let+mut+account+%3D+Account+%7B%0A++++id%3A+1%2C%0A++++balance%3A+100%2C%0A++++%7D%3B%0A++++%2F%2F+Account+goes+in+the+angled+brackets%2C+as+it%27s+a+type+%27T%27+that+implements+%27Transferrable%27%3A%0A++++verify_entity%3A%3A%3CAccount%3E%28%26account%29%3B%0A++++verify_entity%3A%3A%3CAccount%3E%28%26bob%29%3B%0A%7D%0A"}),(0,i.kt)("h2",{id:"whats-happening-here"},"What's happening here?"),(0,i.kt)("p",null,"In this example, we define a common trait ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferrable"),", which allows a struct to define and access three methods: ",(0,i.kt)("inlineCode",{parentName:"p"},"transfer"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"is_legit"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"drain_funds"),".  When a struct implements this trait, it must specify the functionality for each method.  A function, ",(0,i.kt)("inlineCode",{parentName:"p"},"verify_entity"),", also introduces a ",(0,i.kt)("strong",{parentName:"p"},"trait bound")," ",(0,i.kt)("inlineCode",{parentName:"p"},"T: Transferrable"),".  This bound ensures that only types that have correctly implemented ",(0,i.kt)("inlineCode",{parentName:"p"},"Transferrable")," are to be valid arguments."))}u.isMDXComponent=!0}}]);