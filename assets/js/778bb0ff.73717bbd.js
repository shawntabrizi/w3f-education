"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[2481],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,f=u["".concat(p,".").concat(m)]||u[m]||d[m]||l;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},29446:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var r=n(87462),a=(n(67294),n(3905));const l={id:"project-structure",title:"lib.rs Structure Deepdive",sidebar_label:"lib.rs Structure Deepdive",description:"Learn the structure of the pallet works, including how events, errors, and dispatchable functions fit together."},i=void 0,o={unversionedId:"Substrate/section4/project-structure",id:"Substrate/section4/project-structure",title:"lib.rs Structure Deepdive",description:"Learn the structure of the pallet works, including how events, errors, and dispatchable functions fit together.",source:"@site/docs/Substrate/section4/project-structure.md",sourceDirName:"Substrate/section4",slug:"/Substrate/section4/project-structure",permalink:"/docs/Substrate/section4/project-structure",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Substrate/section4/project-structure.md",tags:[],version:"current",lastUpdatedBy:"Bader Youssef",lastUpdatedAt:1693238811,formattedLastUpdatedAt:"Aug 28, 2023",frontMatter:{id:"project-structure",title:"lib.rs Structure Deepdive",sidebar_label:"lib.rs Structure Deepdive",description:"Learn the structure of the pallet works, including how events, errors, and dispatchable functions fit together."},sidebar:"substrate",previous:{title:"Adjusting Pallet Config & Runtime Overview",permalink:"/docs/Substrate/section4/pallet-config"},next:{title:"Creating storage maps",permalink:"/docs/Substrate/section4/create-storage-map"}},p={},s=[{value:"Crucial Macros",id:"crucial-macros",level:2},{value:"Pallet Configuration - <code>Config&lt;T&gt;</code>",id:"pallet-configuration---configt",level:2},{value:"Use of generics and associated types",id:"use-of-generics-and-associated-types",level:3}],c={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In the previous module, we did take a brief tour of the pallet under ",(0,a.kt)("inlineCode",{parentName:"p"},"pallets/connect"),". We learned\nthat a pallet is just a Rust crate, which uses FRAME and its support libraries and macros to create\na valid pallet for a FRAME-based runtime. This lesson will take a deeper dive into how some of these\nmacros work, including the overall structure of a pallet."),(0,a.kt)("h2",{id:"crucial-macros"},"Crucial Macros"),(0,a.kt)("p",null,"If we strip away the logic within ",(0,a.kt)("inlineCode",{parentName:"p"},"pallet_connect"),", we come to see a bare ",(0,a.kt)("inlineCode",{parentName:"p"},"lib.rs"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'#![cfg_attr(not(feature = "std"), no_std)]\n\npub use pallet::*;\n\n#[cfg(feature = "runtime-benchmarks")]\nmod benchmarking;\npub mod weights;\npub use weights::*;\n\n#[frame_support::pallet]\npub mod pallet {\n    use super::*;\n    use frame_support::pallet_prelude::*;\n    use frame_system::pallet_prelude::*;\n\n    #[pallet::pallet]\n    pub struct Pallet<T>(_);\n\n    #[pallet::config]\n    pub trait Config: frame_system::Config {}\n\n    #[pallet::event]\n    #[pallet::generate_deposit(pub(super) fn deposit_event)]\n    pub enum Event<T: Config> {}\n\n    #[pallet::error]\n    pub enum Error<T> {}\n\n    #[pallet::call]\n    impl<T: Config> Pallet<T> {}\n')),(0,a.kt)("p",null,"Top-down, there are a few important macros to pay attention to:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"#[frame_support::pallet]")," - The pallet attribute macro defines a pallet that can be used with\n",(0,a.kt)("inlineCode",{parentName:"li"},"construct_runtime!"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"#[pallet::pallet]")," - The pallet struct placeholder, ",(0,a.kt)("inlineCode",{parentName:"li"},"#[pallet::pallet]")," is mandatory and allows\nyou to specify pallet information."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"#[pallet::config]")," - The mandatory attribute ",(0,a.kt)("inlineCode",{parentName:"li"},"#[pallet::config]")," defines the configurable options\nfor the pallet."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"#[pallet::event]")," - The ",(0,a.kt)("inlineCode",{parentName:"li"},"#[pallet::event]")," attribute allows you to define pallet events."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"#[pallet::error]")," - The ",(0,a.kt)("inlineCode",{parentName:"li"},"#[pallet::error]")," attribute allows you to define an error enum that will\nbe returned from the dispatchable when an error occurs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"#[pallet::call]")," - The ",(0,a.kt)("inlineCode",{parentName:"li"},"#[pallet::call]")," attribute allows you to define ways to dispatch an\nextrinsic.")),(0,a.kt)("p",null,"Each procedural macro generates and expands a piece of code related to the pallet. In terms of Rust,\nyou can see that the pallet is ",(0,a.kt)("strong",{parentName:"p"},"first")," declared as a module, then there is a struct, ",(0,a.kt)("strong",{parentName:"p"},"Pallet"),",\nwhich is the revolving type that this pallet uses to apply its subsequent ",(0,a.kt)("strong",{parentName:"p"},"Config")," trait. Two\nimportant enums, namely ",(0,a.kt)("strong",{parentName:"p"},"Event")," and ",(0,a.kt)("strong",{parentName:"p"},"Error"),", are also available. At a high level, these simply\ndefine pallet-specific events or errors."),(0,a.kt)("mermaid",{value:'---\ntitle: FRAME Macro Breakdown\n---\n%%{init: {"flowchart": {"htmlLabels": false}} }%%\nflowchart LR\nsubgraph MACRO["pub mod Pallet"]\n    direction LR\n    pconfig--\x3epconfigexpand["trait Config<T>"]\n    pstruct(["#[pallet::pallet]"])\n    pconfig(["#[pallet::config]"])\n    pcall(["#[pallet::call]"])--\x3epconfig\n    pstruct--\x3epconfig--\x3epstructexpand["struct Pallet<T>"]\n    pevent(["#[pallet::event]"])--\x3epconfig--\x3epeventexpand["enum Event<T>"]\n    perror["#[pallet::error]"]--\x3eperrorexpand["enum Error<T>"]\nend\npframesupport(["#[frame_support::pallet]"])--\x3e MACRO'}),(0,a.kt)("h2",{id:"pallet-configuration---configt"},"Pallet Configuration - ",(0,a.kt)("inlineCode",{parentName:"h2"},"Config<T>")),(0,a.kt)("p",null,"A common pattern you may notice is a seemingly ambiguous generic type: ",(0,a.kt)("inlineCode",{parentName:"p"},"T"),". If you are unfamiliar\nwith generic types and their usage in Rust, below is a quick explanation of how they work in this\ncontext."),(0,a.kt)("h3",{id:"use-of-generics-and-associated-types"},"Use of generics and associated types"),(0,a.kt)("p",null,"Remember that Substrate is built to be generic, saving the developer the pains of implementing\nblockchain-related primitives from scratch. FRAME and Substrate both make use of two crucial\nRust-related concepts:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Rust/section7/macros"},"Macros")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/Rust/section6/generics"},"Generics / Associated Types"))),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"T")," refers to a generic or ",(0,a.kt)("strong",{parentName:"p"},"placeholder")," type. Where macros enable a relatively easy experience\nimplementing various mandatory functionality, generics allow the code to be highly configurable. The\n",(0,a.kt)("inlineCode",{parentName:"p"},"Config")," trait uses generics to provide a generic implementation of an overarching configuration\nwhich may derive many blockchain primitives therein."))}d.isMDXComponent=!0}}]);