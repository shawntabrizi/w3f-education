"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[724],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>f});var n=r(7294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(r),m=s,f=d["".concat(l,".").concat(m)]||d[m]||p[m]||i;return r?n.createElement(f,a(a({ref:t},u),{},{components:r})):n.createElement(f,a({ref:t},u))}));function f(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=r.length,a=new Array(i);a[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:s,a[1]=o;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},9264:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var n=r(7462),s=(r(7294),r(3905));const i={id:"vectors-vs-strings",title:"Vectors, Strings, and &str Slices",sidebar_label:"Vectors, Strings, and &str Slices",description:"Learn the difference between vectors and strings in Rust."},a=void 0,o={unversionedId:"Rust/section5/vectors-vs-strings",id:"Rust/section5/vectors-vs-strings",title:"Vectors, Strings, and &str Slices",description:"Learn the difference between vectors and strings in Rust.",source:"@site/docs/Rust/section5/vectors-vs-strings.md",sourceDirName:"Rust/section5",slug:"/Rust/section5/vectors-vs-strings",permalink:"/docs/Rust/section5/vectors-vs-strings",draft:!1,editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Rust/section5/vectors-vs-strings.md",tags:[],version:"current",lastUpdatedBy:"NaughtyRider",lastUpdatedAt:1683377274,formattedLastUpdatedAt:"May 6, 2023",frontMatter:{id:"vectors-vs-strings",title:"Vectors, Strings, and &str Slices",sidebar_label:"Vectors, Strings, and &str Slices",description:"Learn the difference between vectors and strings in Rust."},sidebar:"rust",previous:{title:"Defining Methods for Structs",permalink:"/docs/Rust/section5/struct-methods"},next:{title:"Intro to Advanced Rust - Traits, Generics, & Lifetimes",permalink:"/docs/Rust/section6/"}},l={},c=[{value:"When to use a string slice versus a String?",id:"when-to-use-a-string-slice-versus-a-string",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...r}=e;return(0,s.kt)(d,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"It can be rather confusing for a beginner to wrap their head around how these various types relate and how they work together."),(0,s.kt)("p",null,"To summarize:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"A ",(0,s.kt)("inlineCode",{parentName:"li"},"String")," is a data structure that is essentially a wrapped, ",(0,s.kt)("em",{parentName:"li"},"managed")," ",(0,s.kt)("inlineCode",{parentName:"li"},"Vec<T>"),".  It represents a list of UTF-8 bytes that are stored on the heap.  It is useful for defining typical words and sentences in a mutable fashion and can be modified during the runtime.  Recall a ",(0,s.kt)("inlineCode",{parentName:"li"},"String")," is just a struct, meaning it owns the fields within.  In this case, it owns the bytes that you write to it."),(0,s.kt)("li",{parentName:"ul"},"String literals/slices, or ",(0,s.kt)("inlineCode",{parentName:"li"},"&str"),", are immutable, predefined slices of UTF-8 bytes that are defined at ",(0,s.kt)("strong",{parentName:"li"},"compile-time"),", not runtime. They are either stored as ",(0,s.kt)("inlineCode",{parentName:"li"},"'static"),", aka part of the executable in static storage, or on the stack.  It is also fixed-length.  "),(0,s.kt)("li",{parentName:"ul"},"A ",(0,s.kt)("inlineCode",{parentName:"li"},"Vec<T>")," is a data structure that is more generic in nature, as it allows for ",(0,s.kt)("em",{parentName:"li"},"any")," data type to be passed in to form a managed list.")),(0,s.kt)("h2",{id:"when-to-use-a-string-slice-versus-a-string"},"When to use a string slice versus a String?"),(0,s.kt)("p",null,"Remember, slices are ",(0,s.kt)("strong",{parentName:"p"},'"view-only", immutable references'),".  ",(0,s.kt)("inlineCode",{parentName:"p"},"String")," should be used when you require a growable, ownable collection of bytes.  ",(0,s.kt)("inlineCode",{parentName:"p"},"String")," is more costly - within most programs, it is not an issue, but in some environments, it may be better to utilize string slices whenever possible."),(0,s.kt)("p",null,"String slices can also be converted to a ",(0,s.kt)("inlineCode",{parentName:"p"},"String")," rather easily:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-rust"},'\nlet literal_to_string: String = "Hello".to_string();\n\n')))}p.isMDXComponent=!0}}]);