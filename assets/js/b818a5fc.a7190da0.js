"use strict";(self.webpackChunkw3f_education=self.webpackChunkw3f_education||[]).push([[2640],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,f=d["".concat(s,".").concat(m)]||d[m]||l[m]||a;return t?r.createElement(f,o(o({ref:n},u),{},{components:t})):r.createElement(f,o({ref:n},u))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7474:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return d}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],c={id:"panic",title:"Panic! in Rust",sidebar_label:"Panic! in Rust",description:"Discover what panic! in Rust is, and when you should panic."},s=void 0,p={unversionedId:"Rust/section4/panic",id:"Rust/section4/panic",isDocsHomePage:!1,title:"Panic! in Rust",description:"Discover what panic! in Rust is, and when you should panic.",source:"@site/docs/Rust/section4/panic.md",sourceDirName:"Rust/section4",slug:"/Rust/section4/panic",permalink:"/docs/Rust/section4/panic",editUrl:"https://github.com/w3f/w3f-education/edit/main/docs/Rust/section4/panic.md",version:"current",lastUpdatedBy:"behradkhodayar",lastUpdatedAt:1683965470,formattedLastUpdatedAt:"5/13/2023",frontMatter:{id:"panic",title:"Panic! in Rust",sidebar_label:"Panic! in Rust",description:"Discover what panic! in Rust is, and when you should panic."},sidebar:"rust",previous:{title:"Enums",permalink:"/docs/Rust/section4/enums"},next:{title:"Error handling with Result & Option",permalink:"/docs/Rust/section4/error-handling"}},u=[],l={toc:u};function d(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Previously we mentioned the concept of ",(0,a.kt)("strong",{parentName:"p"},"panicking"),", or the program stopping during runtime.  This is usually to prevent something unsafe from occurring, such as the possibility of invalid data being accessed in memory.  A panic is a ",(0,a.kt)("strong",{parentName:"p"},"irrecoverable")," error."),(0,a.kt)("p",null,"However, it is possible to invoke a panic using the ",(0,a.kt)("inlineCode",{parentName:"p"},"panic!")," macro:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},'fn main() {\n    println!("This program will panic!");\n    panic!();\n}\n')),(0,a.kt)("p",null,"The output of this program indicates that an ",(0,a.kt)("strong",{parentName:"p"},"explicit")," panic did indeed occur within the main function: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-rust"},"  Compiling playground v0.0.1 (/playground)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.55s\n     Running `target/debug/playground`\nthread 'main' panicked at 'explicit panic', src/main.rs:3:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\n")),(0,a.kt)("p",null,"There are a few methods that could cause a panic, namely within using ",(0,a.kt)("inlineCode",{parentName:"p"},"Result"),".  Methods such as ",(0,a.kt)("inlineCode",{parentName:"p"},"unwrap()")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"expect()")," can cause a panic if the ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"None"),", as the error is not being handled.  As a result, the program simply panics and closes to prevent any further unwanted behavior."),(0,a.kt)("p",null,'The program should only panic if it could be in a "bad" state, where there is invalid data flowing within the program.  Ideally, errors should be recoverable if possible.  Concepts like logic flows and pattern matching help with handling different types and Errors, which will be apparent in the next section.'))}d.isMDXComponent=!0}}]);